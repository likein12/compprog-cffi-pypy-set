import base64

binary = b'e??420s#R400000000000{}h%0RR91kWl~t00000KmY&$00000m;eC)0000000000Kma%Z2LM0-9RM5v0RR911poj5000000000000000000000000000000sILG300000sILG300000001BW000000RR911^@s65WN5Z000005WOG(000005WOG(00000&>R2&00000*c<==00000001BW000000ssI21^@s60L}ma000000L~x)000000L~x)00000zySaN00000zySaN000002mk;8000001ONa41ONa4$N>NV00000$N>NV00000$N>NV00000Bme*a00000Bme*a000001ONa400000P~~)F1ONa4ypI3?00000ypI3?00000ypI3?00000)CK?m00000)CK?m000001ONa400000QRQ@G1^@s6000000000000000000000000000000000000000000000000005C8xG00000Qss1H1ONa45WN5Z000005WOG(000005WOG(00000@Dcz300000@Dcz3000000RR91000001ONa46aWAK0{{R3M^04$HSMGs`6j&vLsPZB`pP~~5QKF500000g8%>k4FCWD5C8xG3IG5A08-YFC_oSdpx`WF6wVJ300;^oK`{iP41g+Nk~9!erdk37AP4{;3;_bC>;V7(K@0-`2p}Lu0R#mR03ZN>AP5da06_>ODF_Ng000R{GKvZSAb>$o1ONa4ATSId0tNv9Ko9@`SrFDm0zeuV1_2Ze005>bh5#XgfFxM}0000000000000004FCWD4gdfE4*&oF00000000005C8xG000005&!@I6aWAK6#xJL00000761SM0000082|tP8~^|S9RL6T000009{>OVAOHXWApigXA^-pYBme*a00000CjbBdDF6Tf00000D*ylhEC2ui00000E&u=kFaQ7mG5`PoGXMYpH2?qrHvj+t00000H~;_uI{*LxJOBUyKL7v#K>z>%LjV8(L;wH)00000MgRZ+NB{r;NdN!<N&o-=OaK4?00000O#lD@P5=M^00000PXGV_Q2+n{00000Q~&?~RR910RsaA1S^xk5TmS$7UH||9U;qFBVE_OCV*mgEXaE2J00000X#fBKYXATMYybcNZU6uP0000000000Z~y=RasU7T00000000000000000000a{vGU000000000000000000000000000000bN~PVbpQYWcmMzZc>n+adH?_beE<LeegFUffdBviga7~lg#Z8mh5!HniU0rrivR!sjQ{`ujsO4v0000000000j{pDw00000kpKVy0000000000k^lezlK=n!lmGw#00000l>h($mH+?%mjD0&00000nE(I)ng9R*n*aa+oB#j-od5s;o&W#<00000p8x;=00000pa1{>p#T5?q5uE@nIo4G^9mj*g)W%lF6b0`y_Opndcr<RxlFm=i!PYrxsCA-vTN*8H0Tt1!<HKtfWkgXzD&8_SzB5k6GmDG3J0XRw@cPKxohlFyD37RUt3xq7)DwLJI>EY5C^2Xyi3+P->`mc*h9UR{Y2jO5O55(!6`zXLC()e<gk8hxBA-l-b1~X14Z8U7H|x<Q4e+MUzy?Kzzak*Cns1&OkdK@z53erb4YoLRu6URe8(5oB_-(IWtrjQ#tTF>EGJk-Z-*ARQeV=}xwX1bSnxr2c}RJR|49+#g2xxuD<$aO9*mR=b%z$XzqPthU+_V9&IsVR1xgX*wQunYC5)5{iN4&p)Cl0XM-(HVpmg_wx^M9dJ!$VNt)RJXkG|ZvYRufB+^DWy<_yc|;k1J#OcW!a`Ox3QrgZm$Luv0TC`LJ%*>PALv!J<ddPbN4?N^dA=Cp$)dQ;ibaLnAH05K2o?F`H4|IpvWR1<omFGe|;W1Z%lfJT@A^H-8G1~Cuufm7MiPPmu0TN8StX`SYrRk)Y7i?r?c@Sll!eol}UYjgxqyW^64J$kcAL~82y1Ua@3Lt#9O>(lQJfI-;3?DqX#k+kji_MeG)gieqaadZSwy-XosLwd7GN^0u&3OTk9LPgc=Nnt#UU1f%|hC$f9^Y;B+LC+d)!%QJy3?$TvV`YZ3N6#8=%e7wS6C~7$UwH4ii`8KcO*mNe7%uF&(Y0RYWq9wo4_I3qk=0=iQ#e@kA1>^<X^12n6<AvwlOvZA?Ft?#Z-^ut00000000000000000000000000000000000X8-^I5&!@I00000000000000000000egOag5&!@I000000000000000000008~^|SAOHXW00000000000000000000b^rhX5dZ)H00000000000000000000VE_OC5dZ)H00000000000000000000eE<Le5&!@I000000000000000000000RR91AOHXW00000000000000000000ZvX%Q5&!@I00000000000000000000vH$=85&!@I00000000000000000000Pyzq|5&!@I00000000000000000000H~;_uAOHXW00000000000000000000QUCw|A^-pY00000000000000000000ECc`m5&#SUpm+cP000001ONa400000kput$5&#SUuzCOh00000LjV8(00000vjzYF5&#SUV2J<#00000vH$=800000@B#n;5&#SUAa4Kw00000761SM00000y#)XO5&#SU(1HK}000006951J00000yafON5&#SUuz~;p00000761SM000008wLOX5&#SUAcX(`000002mk;800000KLr2)5&#SUfPVl000000x&QzG000005C8xG5&#JR_(uQ$000000000000000$^rlY5&#SUaBctq00000DgXcg00000odEy<5&#SUP-OrB00000761SM00000Ndy1@5&#SUFnIs~000006951J00000NCW@?5&#SU5P1Lq00000761SM00000rvv~15&#SUV0!=n000002mk;800000%>w`c5&#SU@O1zH00000vH$=800000sR9515&#SUpltvE00000NdN!<00000hXw!u5&#SU0Ehqp00000jsO4v00000$OQlZ5&#SU0D}Mk00000O8@`>00000asdDU5&#SUpkx3500000DgXcg00000ngRd-5&#SUP;CGJ00000NB{r;00000e*ypi5&#SU0BisN00000vH$=800000Q2_t|5&#SU&|?4q00000NdN!<00000@dW??5&#SU;DZ1F00000O8@`>0000069oVO5&#SUFn$0400000egFUf00000R0IG35&#SUV0i!l00000LjV8(00000k_7+&5&#SUz<~e&00000Hvj+t00000&I14d5&#SUuyz0d000009smFU00000MFs!>5&#SUpoIVc00000L;wH)00000<^li!5&#SU@NNJA000006951J00000LID5(5&#SUkYfM<00000H~;_u00000eFOji5&#SUKzaZG00000LjV8(000009s~dY5&#SUAb0=(00000Hvj+t00000X9fTO5&#SUAcg<{00000L;wH)00000fC2yj5&#SUz-#~j000009smFU00000(F6bh5&#SU;Clc700000L;wH)00000lK}t#5&#SUAY}jm000006951J00000$pQcX5&#SUFm3<<00000Hvj+t00000lLY_(5&#SU0D=Gj00000DgXcg00000Edc-k5&#SUz+wOZ000002><{900000v<3hG5&#SUAc_D0000009smFU00000cm@Cf5&#SUaE1T?00000AprmY00000^8^3@5&#SUV0-`o00000L;wH)00000e+2*l5&#SUfPnx200000ApigX00000aRC4T5&#SUU}OLQ00000Hvj+t000004g&xH5&#SU;BNo`00000O8@`>00000ng##>5&#SUkca>P00000$p8QV000009|QmZ5&#SUV0Zuk00000DgXcg00000)Bpeg5&#SUa9{uc000002mk;800000Km`B*5&#SUK!5-M000009smFU00000Hvs?u5&#SU;9>v(00000nE(I)000001O)&95&#SUuzUaj000005di=I00000wF3YE5&#SUKy?5B00000rvLx|000008U_FW5&#SUz=Qw*00000QUCw|000003j_cF5&#SU;CBE300000ApigX00000H3I+u5&#SUz;FNn00000O8@`>00000y8!?I5&#SU5M}@X00000LjV8(00000CItWh5&#SUuzmml00000$p8QV00000l>-0(5&#SUuyOzZ00000rU3u|00000-T(jq5&#SUkYE4+00000ga7~l00000X955K5&#SUP-_4H00000rvLx|00000rUU>05&#SUAbS7+00000IsgCw00000Wdi^J5&#SU;Bf!|00000L;wH)00000;sF2v5&#SU@MZu200000LjV8(00000+yejr5&#SUAa?)&000004FCWD00000LIMB)5&#SUz-Ryf00000r2zl{00000g#!Qp5&#SUU~&Ke00000L;wH)000005&{4K5&#SU@Mi!300000L;wH)00000Tm=9C5&#SU;D7)C00000O8@`>00000mID9)5&#SUU~~Wg00000MF0Q*00000jsgGx5&#SUFl_(;000004FCWD00000BLM&a5&#SU@L>P|00000yZ`_I00000N&^4@5&#SUkZ}M2000002mk;800000G6Dbq5&#SUaA*Jk00000L;wH)00000Ndo`?5&#SUFmV6?00000QUCw|00000&;|ei5&#SUz={9>000006#xJL00000y8-|J5&#SU@NED900000ApigX00000!Ug~U5&#SUP>KKm00000O#lD@00000=mP)%5&#SUKz9HD00000LjV8(00000$prua5&#SUP=f#f000002mk;800000LjnK*5&#SUaB2Vm00000MF0Q*00000$^ZZW5&#SUuwMWG00000ssI2000000^Z)<=5&#SUaA5!d000001ONa400000{{{d65C9ke;MpJm000000000000000_W=L^5&#SUpl1L8000002mk;80000069E7K5&#SUz+nIY00000E&u=k00000c?JLg5&#SUpoahe00000MF0Q*00000P6Yq}5&#SUaDV^+00000O#lD@00000@&y0@5&#SUFoXaA000002mk;800000_5lC@5&#SUU}pdT00000IsgCw00000Ck6lj5&#SUK!pGR000008UO$Q00000V*vmF5&#SUAY=dl00000ApigX00000RRjP45&#SUuz3Ig000002mk;800000+XDaq5&#SU;C28200000J^%m!00000lK=n!5&#SUFkb)w000001ONa400000!v+8V5&#SUpo#zh000004FCWD00000x&QzG5&#SUfL{Or00000E&u=k000001qA>A5&#SU(0u>^00000MF0Q*00000vjhMD5&#SUfO`M{000008UO$Q00000egpsj5&#SUka_?B000002mk;800000@d5w<5&#SUKyLs5000006951J00000jRF7w5&#SU@N57800000J^%m!00000PXzz~5&#SUz<>Y%000004FCWD00000o&f*=5&#SUaAg1h000006951J00000Rt5k75&#SU@Pz;X00000A^-pY00000<pKZz5&#SU&~5+#00000761SM00000u>}AC5&#SUfPw%3000006951J00000`vL#}5&#SUaBlzr00000O8@`>000003kLuI5C9ke=-D6u000000000000000umu1B5&#SUV1fVu00000761SM00000GzI_w5&#SUaD@N>00000A^-pY00000)&c+k5&#SUux<bV000001ONa400000=>Px#5&#SUFkt`y00000C;$Ke00000761SM5&#VV*opuE000000000000000Yy|)S5&#SUFo6I700000NdN!<00000A_D*b5&#SUP;dYM00000O8@`>00000;sgKy5&#SUFnj<200000A^-pY00000k^uk!5&#SU0A&CG00000761SM00000Jp=#%5&#SU;CKK4000006951J00000r~v=~5&#SUpk)9600000LjV8(000004+8)I5&#SUFmM0>000002mk;800000JOls$5&#SUz<2-v00000761SM00000zytsQ5&#SUuzLUi00000A^-pY00000g8={l5&#SU;A8**000001ONa400000_yzy~5C9hd;MpJm000000000000000hyVZp5&#SU@Lm7_00000C;$Ke00000qXPf{5&#SUz;plr00000egFUf00000_yYg{5&#SUkaqw800000NdN!<00000&jA1c5&#SUfMx&y00000LjV8(00000HUj_v5&#SU5ODwi000002mk;800000ya50J5&#SUU}gXS000002mk;8000000|5X45&#SUkYNA-00000CIA2c00000RRRD25&#SU&}skx00000egFUf00000;{gBw5&#SUKxY5|000002mk;800000-30&u5&#SUz=Hq)000002mk;800000q5uE@5&#SUP+tH500000CIA2c00000bprqZ5&#SUFmeC@00000A^-pY00000`~m;~5&#SUz;6Hm000002mk;8000001_l5C5&#SUpo9Pb000002mk;800000RRaJ35&#SUuyFtY00000A^-pY00000X#@ZO5&#SUAbJ1*000002mk;800000A_4#a5&#SUKxhB}00000A^-pY00000BLe^c5&#SUpl|>H000002mk;800000sQ~~05&#SU@MQo1000002mk;800000k^}$%5&#SU0DAxc000002mk;8000000s;U45&#SUz-Ise00000A^-pY00000+ywvt5&#SUaDxB<00000O8@`>00000&;bAd5&#SU&}IMt000002mk;800000palQ`5&#SUK!N}O000001ONa4000001qJ{B5&#SUP=o*g00000O8@`>00000XaoQN5&#SU(0Kp=00000LjV8(000000AF8cZEtR0b97;HbYEWpUukY>bO2vwX>Mr%UrAI=Uu0!+WoKz~bY*f>O+##NZe>(qVr*pqUrAI=Uvgz<X>)XCa#T%2Y;SI5RAFLlWdL7aV|Za-W@&C=Y-xIB0CRL?X>I^tUv*||Z+8G~VQg$~V*qn>WN&qJ0AF8kc4cyAY;Sh}XmMX@ZfSI1Y-|8%abIU;bYF96dSzd1YyfC+UuAf7Wo~q7Z*E^~Yyfg)VQg$~V*qGzUvgz+bz^jCZ*E^~YyfC+UvO`5Uu<juXmMY3Z*X61YyfC+UvPDEXkTn>0BCVvX>MtBUu<RoXmMX>WprP2X?kT}Y-RvxabIP4bY*UIX>V>{Y-RvxabI#}WOZY7X>V>{Y-RvxabIw6a9?a@0BCVvbZ>B9Y-RvxabIwCb7)^|W&mSzUv6c0Uv6(?WnXM;0Aq7sZf|5|Uv+R~VRU6*Y-|8yZ*ygIUukY>bYE<20AFKsUt?@#VRBz=Yyf6*Wn}<kb6;m=bYF96dSzd1Yye+lb6;&?cwcO60AFKsUu|h_Uu<juUt@D$Y;SjEa$jO^b#7!|Y-|8uV{>0}Y;SjEa$jO^b#7!|Y-|8uV{>11aByXEUt(`{Ze(9<Yye+lb6;|GaByXEUt(`{Ze(9<Yye+lb6;j@Ze(9<Yye|(Uvh7BVRU6*b8KI1Yye|(Uvh7BVRU6*WO83@Yye|(Uvh7BVRU6*b8=s7Yye|(Uvh7BVRU6*WNcq-Yye+lb6;t0b7gXLUu<juWq4_H0AFKsUvgz_Z+2y0ZDDv{Y-|8uV{>0}Wo>VEWnX4;Z*5<6VRC0*Y-|8uV{>0}Wo>VEWnXM;0AFKsUuR`>Uu$1%Yye|(Uv6c0Uv6(?WnXM&0Aq7sZf|5|Uv+R~VRU6*Y-RvsZ*ygIUukY>bYE;{0AFKsUt?@#VRBz=W&mSzUuR`>Uvp`CWnXM&0AFKsUu|J{Uu<RoUt@D$ZE0>_Y-RvoV{>0@Z+B&KUt(`{Ze(9<W&mGfb6;|7Z+B&KUt(`{Ze(9<W&mGfb6<6EaAk5|VsCYBWM6D%0AFKsUvhPDaAk5|VsCYBWM6D%0AFKsUuJ1;WM6D%0Aq7sa&L5DbY)+2Y+r0<0Aq7sa&L5DbY)*;a$js_0Aq7sa&L5DbY)+2a$js_0Aq7sa&L5DbY)*;Y+r0<0AFKsUukZ0WpZ?1Y-RvoV{>0}Wo>VEWnXP!cwcO00AFKsUvgz_Z+2y0W^!+BUvyz|XJ2e)0AFKsUvgz_Z+2y0Y-RvoV{>0;WprO_Uu<RoV{LO^Ze@30Zf|5|Uu<juV{LO^Zf|5|Uv+R~VRU6*Y-|8yZ*6sKbZK*CbYE$1X>?y~Yye+lZF65^Y-M3`Uu<juV{LO^XJvF>b7^{IUu<juUt?`^Uu|J{Uu<juUt?`^Uu|h_Uu<juUt?`^Uu<u8WpZC)Z*^{DUu<juUt?`^Uvg}3cV%*4VsCYBWM6D-0AFKmb6<6EaAk5|VsCYBWM6D-0AFKmb6;|GaByXEUt(`{Ze(9<Yye+lZF65{X>Md+Y-|8yZF65^Z*^{TUu<juV{LO^a&L5DbY)+2Y+r0_0Ap=)Uvh7BVRU6*WO83@Yye|zb6;|AbYXO5UvqL_Y-|8yZF668Z**aFWnW}$Uu<juUt?`^UukZ0WpZ?1Y-|8uV{LO^a%F9Ac4c2}VR&C`Yye+lZF668Wo>VEWnX4;Z*5<6VRC0*Y-|8uV{LO^a%F9Ac4c2|Yye+lZF65|WprO_Uu<juV{LO^Ze@30Zf|5|Uu<RoV{LO^Zf|5|Uv+R~VRU6*Y-RvsZ*6sKbZK*CbYE$1X>?y~W&mGfZF65^Y-M3`Uu<RoV{LO^XJvF>b7^{IUu<RoUt?`^Uu|J{Uu<RoUt?`^Uu|h_Uu<RoUt?`^Uu<u8WpZC)Z*^{DUu<RoUt?`^Uvg}3cV%*4VsCYBWM6D%0AFKmb6<6EaAk5|VsCYBWM6D%0AFKmb6;|GaByXEUt(`{Ze(9<W&mGfZF65{X>Md+Y-RvsZF65^Z*^{TUu<RoV{LO^a&L5DbY)+2Y+r0<0Ap=)Uvh7BVRU6*WO83@W&mStb6;|AbYXO5UvqL_Y-RvsZF668Z**aFWnW}$Uu<RoUt?`^UukZ0WpZ?1Y-RvoV{LO^a%F9Ac4c2}VR&C`W&mGfZF668Wo>VEWnX4;Z*5<6VRC0*Y-RvoV{LO^a%F9Ac4c2|W&mGfZF65|WprO_Uu<RoUt?xwX<u-8aCvENX>?y-V{dJ6aB^>FUt?xwX#i|#Vq-3IZ!R_fUu9%rbYTErUt)7}UvqR}a&!P+Wo~2uM@&gVLtip3GA=a$000620ssI20ssO40ssI20ssO40ssI20ssL30RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RRC20RR91000000RRC2?gjt=5C8xG00000bsA|2000625C;GN000005WOG(000002mk;800000U{U}8000007`-3>000002mk;800000AW{GT00000AiW>}000002mk;8000000M#G>00000D7_#6000002mk;800000V8tK+00000FufoE000002mk;800000V89>%00000IK3bM000002mk;800000z`h^=00000NWCBc000002mk;800000fW06900000fW069000002mk;800000;feqN00000ki8%P000002mk;800000Xo~;<00000puHdf000002mk;800000bBh1~00000u)QDv000002mk;800000>52dV00000z`Y;<000002mk;800000_lf`j00000(7hl4000002mk;8000001&aUx00000;JqLK000002mk;8000005sLr-00000@Vy`a000002mk;800000ev1GA000000KOmq000002mk;800000jf(&P000005WXM)000002mk;800000oQnVe00000Aif{~000002mk;800000ri%ao00000FuouF000002mk;8000009g6?}00000K)xUV000002mk;800000DvJOB00000P`)4l000002mk;800000H;VuO00000V7?##000002mk;800000LW=+Z00000aK0b_000002mk;800000O^W~k00000fW9CA000002mk;800000T8jVx00000kiH-Q000002mk;800000#f<;}00000puQjg000002mk;800000(2W2900000z`h^=000002mk;800000XNv#;00000=)NET000002mk;800000a*F@}000005WgS*000002mk;800000eTx7900000IKLnO000002mk;800000jEevO00000V80*$000002mk;800000n~MMd00000h`%5J000002mk;800000rHcRn00000u)iPx000002mk;8000001&aUx00000*uNkE000002mk;8000005sLr-000000Kgys000002mk;800000H;VuO00000D8L{9000002mk;800000LW=+Z00000V89>%000002mk;800000uZsWx00000fWROC000002mk;800000=ZXLT00000puivi000002mk;800000vx@)#00000z`!5?000002mk;800000uZsWx00000;J_dN000002mk;800000=ZXLT000000Kp&t000002mk;800000vx@)#00000Ai*F2000002mk;800000wTl1%00000K*1mY000002mk;800000x{Ck+00000V8I{&000002mk;800000wTl1%00000fWaUD000002mk;800000x{Ck+00000pur#j000002mk;800000wTl1%00000z`-B@000002mk;800000x{Ck+00000;K3jO000002mk;800000wTl1%000000Ky;u000002mk;800000x{Ck+00000Ai^L3000002mk;800000zl#6>00000K*AsZ000002mk;800000!;1g_00000V8S2(000002mk;800000$%_C000000fWjaE000002mk;800000&Wiv500000pu!*k000002mk;800000)QbQB00000z``H^000002mk;800000x{Ck+00000;KCpP000002mk;800000*^2-G000000K*^v000002mk;800000zl#6>00000Aj2R4000002mk;800000!;1g_00000K*Jya000002mk;800000$%_C000000V8b8)000002mk;800000&Wiv500000fWsgF000002mk;800000)QbQB00000pu->l000002mk;800000x{Ck+00000z{4N_000002mk;800000*^2-G00000;KLvQ000002mk;800000zl#6>000000K^~w000002mk;800000$%_C000000AjBX5000002mk;800000&Wiv500000K*S&b000002mk;800000)QbQB00000V8kE*000002mk;800000x{Ck+00000fW#mG000002mk;800000*^2-G00000pu`{m000002mk;800000zl#6>00000z{DT`000002mk;800000$%_C000000;KU#R000002mk;800000&Wiv5000000L35x000002mk;800000)QbQB00000AjKd6000002mk;800000x{Ck+00000K*b;c000002mk;800000*^2-G00000V8tK+000002mk;800000-HQMK00000XvH7^000002mk;800000FoFO800000c*P(9000002mk;800000FoFO800000fW;sH000002mk;800000>WcsX00000h{YfP000002mk;800000kaz$900000n8hFf000002mk;800000kaz$900000pv52n000002mk;800000_lp1k00000sKp=v000002mk;800000V1)nx00000xWym<000002mk;800000V1)nx00000z{MZ{000002mk;8000001dIRx00000$i*N4000002mk;800000pnCuS00000*u@|K000002mk;800000pnCuS00000;Kd*S000002mk;8000005sUx;00000=*1ua000002mk;800000FoggB00000_{AUq000002mk;800000FoggB000000LCBy000002mk;8000009gF|~000002*w})000002mk;800000aC-m%000007{(v~000002mk;800000aC-m%00000AjTj7000002mk;800000DU1LB00000D8?WF000002mk;800000u!;Zx00000IL06V000002mk;800000u!;Zx00000K*k^d000002mk;800000HjDrO00000NX8%l000002mk;800000(0~8{00000SjHd#000002mk;800000(0~8{00000V8$Q-000002mk;800000LyQ0b00000XvQD_000002mk;800000P=Wve00000c*Y<A000002mk;800000P=Wve00000fW{yI000002mk;800000Q;Yxr00000h{hlQ000002mk;800000uy_Cf00000n8qLg000002mk;800000uy_Cf00000pvE8o000002mk;800000V~hX*00000sKy`w000002mk;800000@P_~Z00000xW*s=000002mk;800000@P_~Z00000z{Vf|000002mk;800000af|=}00000$i^T5000002mk;800000AbtP<00000*v23L000002mk;800000AbtP<00000;Km>T000002mk;800000e~bVC00000=*A!b000002mk;800000V1obv00000_{Jar000002mk;800000V1obv000000LLHz000002mk;800000l8gWV000002*)4*000002mk;800000z<B@w000007{?$0000002mk;800000z<B@w00000Ajcp8000002mk;800000rHlXo00000D90cG000002mk;800000pn?DZ00000IL9CW000002mk;800000pn?DZ00000K*t~e000002mk;800000u#5lz00000NXH-m000002mk;8000000C@la00000SjQj$000002mk;8000000C@la00000V8<W;000002mk;800000yNmz;00000XvZJ`000002mk;800000@PYsU00000c*h_B000002mk;800000@PYsU00000fX5&J000002mk;800000#*6>}00000h{qrR000002mk;800000P<a3V00000n8zRh000002mk;800000P<a3V00000pvNEp000002mk;800000(To5900000sK+1x000002mk;800000K#BkW00000xW^y>000002mk;800000K#BkW00000z{el}000002mk;800000-;4kN00000$j2Z6000002mk;800000V1NJs00000*vB9M000002mk;800000V1NJs00000;Kv{U000002mk;800000?Ti2b00000=*J)c000002mk;800000(1QQ~00000_{Sgs000002mk;800000(1QQ~000000LUN!000002mk;8000000gV6v000002*@A+000002mk;800000FnRz0000007|0+1000002mk;800000FnRz000000Ajlv9000002mk;8000006^#G@00000D99iH000002mk;800000u!H~r00000ILIIX000002mk;800000u!H~r00000K*%5f000002mk;800000DUARC00000NXQ@n000002mk;8000005PJXs00000SjZp%000002mk;8000005PJXs00000V8|c<000002mk;800000J&gbW00000XviP{000002mk;800000K!gAQ00000c*r0C000002mk;800000K!gAQ00000fXE;K000002mk;800000P>lcp00000h{zxS000002mk;800000pn3oR00000n8+Xi000002mk;800000pn3oR00000pvWKq000002mk;800000V~qd+00000sK_7y000002mk;800000uz>&o00000xX2&?000002mk;800000uz>&o00000z{nr~000002mk;800000c8vf400000$jBf7000002mk;8000005O@Fp00000*vKFN000002mk;8000005O@Fp00000;K(2V000002mk;800000iH!gN00000=*S=d000002mk;800000AZ`Ev00000_{bmt000002mk;800000AZ`Ev000000LdT#000002mk;800000myG}b000002+1G-000002mk;800000P-FlA000007|9?2000002mk;800000P-FlA00000Aju#A000002mk;800000rHudp00000D9IoI000002mk;800000pl$#F00000ILROY000002mk;800000pl$#F00000K*=Bg000002mk;800000v5f!#00000NXZ}o000002mk;800000&}0Ar00000Sjiv&000002mk;800000&}0Ar00000V96i=000002mk;800000y^R0>00000XvrV|000002mk;800000pm6{I00000c*!6D000002mk;800000pm6{I00000fXN^L000002mk;800000$c+F100000h{+%T000002mk;800000ux9`O00000n8_dj000002mk;800000ux9`O00000pvfQr000002mk;800000(~STC00000sL3Dz000002mk;800000Fn0g|00000xXB;@000002mk;800000Fn0g|00000z{wy0000002mk;800000-;DqO00000$jKl8000002mk;800000Ky3g300000*vTLO000002mk;800000Ky3g300000;K?8W000002mk;800000>x}>a00000=*b`e000002mk;800000z-|Bl00000_{ksu000002mk;800000z-|Bl000000LmZ$000002mk;800000`i%ep000002+AM;000002mk;800000@MHi0000007|I|3000002mk;800000@MHi000000Aj%*B000002mk;800000361~&00000D9RuJ000002mk;800000uyg<b00000ILaUZ000002mk;800000uyg<b00000K*}Hh000002mk;8000007LEV_00000NXj4p000002mk;800000z-j;h00000Sjr#(000002mk;800000z-j;h00000V9Fo>000002mk;800000BaQ$700000Xv!b}000002mk;800000&~E?$00000c*-CE000002mk;800000&~E?$00000fXW~M000002mk;800000HI4uP00000h{_-U000002mk;8000000A>IH00000n93jk000002mk;8000000A>IH00000pvoWs000002mk;800000M~(mh00000sLCJ!000002mk;8000005N`kg00000xXK^^000002mk;8000005N`kg00000z{(&1000002mk;800000QH}rr00000$jTr9000002mk;800000KxF^`00000*vcRP000002mk;800000KxF^`00000;L0EX000002mk;800000TaEw#00000=*l1f000002mk;800000U~d2b00000_{tyv000002mk;800000U~d2b000000Lvf%000002mk;800000WsU#<000002+JS<000002mk;800000kYxY>000007|S34000002mk;800000kYxY>00000Aj=>C000002mk;800000Z;k)}00000D9a!K000002mk;800000&~^X-00000ILjaa000002mk;800000&~^X-00000K+7Ni000002mk;800000e2xGB00000NXsAq000002mk;800000;A{W@00000Sj!*)000002mk;800000;A{W@00000V9Ou?000002mk;800000iH-mO00000Xv-h~000002mk;800000KyUy600000c*`IF000002mk;800000KyUy600000fXg5N000002mk;800000oQ?nh00000h|3@V000002mk;800000aAp7i00000n9Cpl000002mk;800000aAp7i00000pvxct000002mk;800000uZ{o!00000sLLP#000002mk;800000AaMWy00000xXT~_000002mk;800000AaMWy00000z{?;2000002mk;800000!j1p{00000$jcxA000002mk;800000P-g%D00000*vlXQ000002mk;800000P-g%D00000;L9KY000002mk;800000)s6rF00000=*u7g000002mk;800000uy6nX00000_{$&w000002mk;800000uy6nX000000L&l&000002mk;800000=Z*jX000002+SY=000002mk;800000;AQ{-000007|b95000002mk;800000;AQ{-00000Aj}{D000002mk;800000`Hlbp00000D9j)L000002mk;800000fMEat00000ILsgb000002mk;800000fMEat00000K+GTj000002mk;8000002#){&00000NX#Gr000002mk;800000Kwkg=00000Sj->*000002mk;800000Kwkg=00000V9X!@000002mk;8000007mok{00000Xv`o0000002mk;800000U||3N00000c+4OG000002mk;800000U||3N00000fXpBO000002mk;800000B98z700000h|C}W000002mk;800000AYT9g00000n9Lvm000002mk;800000AYT9g00000pv)iu000002mk;800000Esp>I00000sLUV$000002mk;800000uwnoJ00000xXd5`000002mk;800000uwnoJ00000z|0^3000002mk;800000H;(`S00000$jl%B000002mk;800000U|;|M00000*vudR000002mk;800000U|;|M00000;LIQZ000002mk;800000L5~0c00000=*%Dh000002mk;800000fMWmv00000_{<;x000002mk;800000fMWmv000000L>r(000002mk;800000OpgEn000002+be>000002mk;800000AYlLi000007|kF6000002mk;800000AYlLi00000Ak82E000002mk;800000SC0Sy00000D9s=M000002mk;800000&|&}p00000IL#mc000002mk;800000&|&}p00000K+PZk000002mk;800000VUGX+00000NX;Ms000002mk;800000fM5Us00000Sj`{+000002mk;800000fM5Us00000V9g)^000002mk;800000YmWc`00000Xw4u1000002mk;800000P+R~200000c+DUH000002mk;800000P+R~200000fXyHP000002mk;800000evbeE00000h|M4X000002mk;800000fL8zj00000n9U#n000002mk;800000fL8zj00000pv@ov000002mk;800000k&gfX00000sLdb%000002mk;800000a8&>R00000xXmB{000002mk;800000a8&>R00000z|9~4000002mk;800000ppO6m00000$ju-C000002mk;800000a8dvO00000*v%jS000002mk;800000a8dvO00000;LRWa000002mk;800000tB(Kx00000=*=Ji000002mk;800000FjD{k00000_{|^y000002mk;800000FjD{k00000;M5=h000002mk;800000;M5=h00000z|SB6000001^@s60{{R30000000000$j=}E000001^@s61ONa40000000000(9a+M000001^@s61poj50000000000*v}vU000001^@s62LJ#70000000000;Ljic000001^@s63jhEB0000000000=+7Vk000001^@s63;+NC00000000007|<X9000002LJ#78~^|S0000000000AkZKH000002LJ#70RR910000000000D9|7P000002LJ#7V*mgE0000000000Fwh_X000002LJ#7lmGw#0000000000IM5&f000002LJ#70ssI20000000000K+qrn000002LJ#7761SM0000000000NYEev000002LJ#7nE(I)0000000000P|zR%000002LJ#7Q~&?~0000000000SkNE<000002LJ#7U;qFB0000000000V9+1{000002LJ#7PXGV_0000000000XwV=4000002LJ#7UH||90000000000aL^zC000002LJ#75&!@I0000000000c+emK000002LJ#7A^-pY0000000000fY2ZS000002LJ#7dH?_b0000000000h|nMa000002LJ#7XaE2J0000000000kkB9i000002LJ#7h5!Hn0000000000n9v{q000002LJ#7N&o-=0000000000pwJ)y000002LJ#7WB>pF0000000000sL&t)000002LJ#7ng9R*0000000000u+Sg?000002LJ#782|tP0000000000xX>T~000002LJ#7K>z>%0000000000z|bH7000002LJ#7c>n+a0000000000$j~4F000002LJ#79{>OV0000000000(9j?N000002LJ#7p8x;=0000000000*w7#V000002LJ#79RL6T0000000000;Lsod000002LJ#7NdN!<0000000000=+Gbl000002LJ#7Bme*a0000000000@X#Ot000002LJ#7djJ3c0000000000_|PB#000002LJ#7g#Z8m00000000000MQ@-000002LJ#7hX4Qo00000000002+<$_000002LJ#7RsaA100000000005YZq2000002LJ#7ivR!s00000000007||dA000002LJ#7I{*Lx0000000000AkiQI000002LJ#7egFUf0000000000DA6DQ000002LJ#7fdBvi0000000000Fwr0Y000002LJ#7lK=n!0000000000IME;g000002LJ#7i~s-t0000000000K+zxo000002LJ#7G5`Po0000000000NYNkw000002LJ#7e*gdg0000000000P|+X&000002LJ#7bpQYW0000000000SkWK=000002LJ#7LI3~&0000000000V9_7|000002LJ#7Hvj+t0000000000Xwe`5000002LJ#7j{pDw0000000000aM2(D000002LJ#7mjD0&0000000000c+nsL000002LJ#7od5s;0000000000fYBfT000002LJ#7GXMYp0000000000h|wSb000002LJ#71^@s60000000000kkKFj000002LJ#7Z~y=R0000000000n9(2r000002LJ#7DF6Tf0000000000pwS=z000002LJ#7JOBUy0000000000sL>z*000002LJ#7m;e9(0000000000u+bm@000002LJ#7b^rhX0000000000xX~a0000002LJ#7p#T5?0000000000z|kN8000002LJ#7f&c&j0000000000$k8AG000002LJ#7Q2+n{0000000000(9s|O000002LJ#7a{vGU0000000000*wG*W000002LJ#7FaQ7m0000000000;L#ue000002LJ#75C8xG0000000000=+Phm000002LJ#7F#rGn0000000000@X;Uu000002LJ#7jsO4v0000000000_|YH$000002LJ#7H~;_u00000000000MZ};000002LJ#74gdfE00000000002+|+`000002LJ#7IRF3v00000000005Yiw3000002LJ#7WdHyG00000000007}6jB000002LJ#7VE_OC0000000000AkrWJ000002LJ#7k^lez0000000000DAFJR000002LJ#7YybcN0000000000Fw!6Z000002LJ#7ApigX0000000000IMN^h000002LJ#7O#lD@0000000000K++%p000002LJ#77XSbN0000000000NYWqx000002LJ#7MgRZ+0000000000P|_d(000002LJ#7B>(^b0000000000SkfQ>000002LJ#7kN^Mx0000000000VA3D}000002LJ#7CjbBd0000000000Xwo16000002LJ#7oB#j-0000000000aMB<E000002LJ#7iU0rr0000000000c+wyM000002LJ#7S^xk50000000000fYKlU000002LJ#7Pyhe`0000000000h|(Yc000002LJ#7mH+?%0000000000kkTLk000002LJ#7EC2ui0000000000n9?8s000002LJ#7H2?qr0000000000pwb`!000002LJ#77ytkO0000000000sL~(+000002LJ#7kpKVy0000000000u+ks^000002LJ#75dZ)H0000000000xY8g1000002LJ#7cK`qY0000000000z|tT9000002LJ#7g8%>k0000000000$kHGH000002LJ#7L;wH)0000000000(9$3P000002LJ#7jQ{`u0000000000*wP>X000002LJ#7QUCw|0000000000;L;!f000002LJ#7E&u=k0000000000=+Ynn000002LJ#7OaK4?0000000000@X{av000002LJ#72mk;80000000000_|hN%000002LJ#78UO$Q00000000000Mj4<000002LJ#7VgLXD00000000002-6?{000002LJ#7Z2$lO00000000005Yr$4000002LJ#7d;kCd00000000007}FpC000002LJ#7i2wiq0000000000Ak!cK000002LJ#76951J0000000000DAOPS000002LJ#7ZU6uP0000000000Fw-Ca000002LJ#7W&i*H0000000000IMW~i000002LJ#7D*ylh0000000000K+_-q000002LJ#7TL1t60000000000NYfwy000002LJ#7CIA2c0000000000P}3j)000002LJ#7O8@`>0000000000SkoW?000002LJ#72><{90000000000VACJ~000002LJ#7LjV8(0000000000Xwx77000002LJ#7BLDyZ0000000000aMK_F000002LJ#7ga7~l0000000000c+(&N000002LJ#7YXATM0000000000fYTrV000002LJ#7asU7T0000000000h|?ed000002LJ#7EdT%j0000000000kkcRl000002LJ#79smFU0000000000nA0Et000002LJ#7Jpcdz0000000000pwl1#000002LJ#7RR9100000000000sM8<-000002LJ#7Gynhq0000000000u+ty_000002LJ#7bN~PV0000000000xYHm2000002LJ#7HUIzs0000000000z|$ZA000002LJ#7TmS$70000000000$kQMI000002LJ#7X8-^I0000000000(9<9Q000002LJ#7q5uE@0000000000*wY{Y000002LJ#7fB*mh0000000000;L{)g000002LJ#7SO5S30000000000=+hto000002LJ#7P5=M^0000000000@Y5gw000002LJ#7o&W#<0000000000_|qT&000002LJ#7DgXcg00000000000MsA=000002LJ#7NB{r;00000000002-F||000002LJ#73IG5A00000000005Y!+5000002LJ#7aR2}S00000000007}OvD000002LJ#7AOHXW0000000000Ak-iL000002LJ#7X#fBK0000000000DAXVT000002LJ#7KL7v#0000000000Fw`Ib000002LJ#7M*si-0000000000IMg5j000002LJ#7J^%m!0000000000K-3@r000002LJ#74*&oF0000000000NYo$z000002LJ#7KmY&$0000000000P}Cp*000002LJ#7ZvX%Q0000000000Skxc@000002LJ#7F8}}l0000000000VALQ0000002LJ#7C;$Ke0000000000Xw)D8000002LJ#76aWAK0000000000aMU0G000002LJ#74FCWD0000000000c+?;O000002LJ#7pa1{>0000000000fYcxW000002LJ#7MF0Q*0000000000h}0ke000002LJ#7SpWb40000000000kklXm000002LJ#7IsgCw0000000000nA9Ku000002LJ#7n*aa+0000000000pwu7$000002LJ#7Qvd(}0000000000sMH_;000002LJ#7l>h($0000000000u+$&`000002LJ#7T>t<80000000000xYQs3000002LJ#7Y5)KL0000000000z|<fB000002LJ#78vp<R0000000000NQ3MMNQ(v4hadn*g}`(I|IkQ-#0bLx|26W5AOQa*^oJk-4<A4P|0VK=AOL6p0002#;Q#;s|0U{&AOL6q0002#(EtDc|0UvwAOL6r0002#!2kdM|0UXoAOL6s0002#u>b%6|0U9gAOL6t0002#p#T5>|0T+YAOL6u0002#kpKVx|0TkQAOL6v0002#fdBvh|0TMIAOL6w0002#aR2}R|0S}AAOL6x0002#VE_OB|0Sx2AOL6y0002#Q2+n`|0SY_AOL6z0002#K>z>$|0SA-AOL6!0002#F#rGm|0R-#AOL6#0002#ApigW|0RltAOL6$0002#5dZ)G|0RNlAOL6%0002#0RR90|0Q~dAOL6&0002#@c#e*|0QyVAOL6(0002#;Qs&r|0QaNAOL6)0002#(Ek7b|0QCFAOL6*0002#!2bXL|0P<7AOL6+0002#u>Sx5|0Pm~AOL6-0002#p#J~=|0PO?AOL6;0002#kpBPw|0P0)AOL6<0002#fd2pg|0OzyAOL6=0002#aQ^@Q|0ObqAOL6>0002#VE+IA|0ODiAOL6?0002#Q2zh_|0N=aAOL6@0002#K>q*#|0NoSAOL6^0002#F#iAl|0NQKAOL6_0002#ApZaV|0N2CAOL6`0002#5dQ!F|0M#4AOL6{0002#0RI2~|0Vi{AOL6|0002#@csY)|0VK<AOL6}0002#;Qjyq|0U{%AOL6~0002#(Eb1a|0UvvAOL700002#!2SRK|0UXnAOL710002#u>Jr4|0U9fAOL720002#p#A^<|0T+XAOL730002#kp2Jv|0TkPAOL740002#fc^jf|0TMHAOL750002#aQ*-P|0S}9AOL760002#VEzC9|0Sx1AOL770002#Q2qb^|0SY^AOL780002#K>h#!|0SA+AOL790002#F#Z4k|0R-!AOL7A0002#ApQUU|0RlsAOL7B0002#5dHuE|0RNkAOL7C0002#0R8{}|0Q~cAOL7D0002#@cjS(|0QyUAOL7E0002#;Qasp|0QaMAOL7F0002#(ER`Z|0QCEAOL7G0002#!2JLJ|0P<6AOL7H0002#u>Al3|0Pm}AOL7I0002#p#1;;|0PO>AOL7J0002#ko^Du|0P0(AOL7K0002#fc*de|0OzxAOL7L0002#aQy%O|0ObpAOL7M0002#VEq68|0ODhAOL7N0002#Q2hV@|0N=ZAOL7O0002#K>Yvz|0NoRAOL7P0002#F#P}j|0NQJAOL7Q0002#ApHOT|0N2BAOL7R0002#5d8oD|0M#3AOL7S0002#0Q~>||0Vi`AOL7T0002#@caM&|0VK;AOL7U0002#;QRmo|0U{$AOL7V0002#(EI=Y|0UvuAOL7W0002#!2AFI|0UXmAOL7X0002#u>1f2|0U9eAOL7Y0002#p!@&-|0T+WAOL7Z0002#ko*7t|0TkOAOL7a0002#fcyXd|0TMGAOL7b0002#aQpxN|0S}8AOL7c0002#VEh07|0Sx0AOL7d0002#Q2YP?|0SY@AOL7e0002#K>Ppy|0SA*AOL7f0002#F#G@i|0R-zAOL7g0002#Ap8IS|0RlrAOL7h0002#5c~iC|0RNjAOL7i0002#0Q>*{|0Q~bAOL7j0002#@cRG%|0QyTAOL7k0002#;QIgn|0QaLAOL7l0002#(E9)X|0QCDAOL7m0002#!219H|0P<5AOL7n0002#u=@Z1|0Pm|AOL7o0002#p!)y+|0PO=AOL7p0002#koy1s|0P0&AOL7q0002#fcpRc|0OzwAOL7r0002#aQgrM|0OboAOL7s0002#VEX_6|0ODgAOL7t0002#Q2PJ>|0N=YAOL7u0002#K>Gjx|0NoQAOL7v0002#F#7-h|0NQIAOL7w0002#Ao~CR|0N2AAOL7x0002#5c>cB|0M#2AOL7y0002#0Q&#`|0Vi_AOL7z0002#@cIA$|0VK-AOL7!0002#;Q9am|0U{#AOL7#0002#(E0!W|0UvtAOL7$0002#!1@3G|0UXlAOL7%0002#u=)T0|0U9dAOL7&0002#p!xs*|0T+VAOL7(0002#koo`r|0TkNAOL7)0002#fcgLb|0TMFAOL7*0002#aQXlL|0S}7AOL7+0002#VEO<5|0Sw~AOL7-0002#Q2GD=|0SY?AOL7;0002#K>7dw|0SA)AOL7<0002#F!}%g|0R-yAOL7=0002#Ao>6Q|0RlqAOL7>0002#5c&WA|0RNiAOL7?0002#0Qvv_|0Q~aAOL7@0002#@c94#|0QySAOL7^0002#;Q0Ul|0QaKAOL7_0002#(D?uV|0QCCAOL7`0002#!1(|F|0P<4AOL7{0002#u=xM~|0Pm{AOL7|0002#p!om)|0PO<AOL7}0002#kof=q|0P0%AOL7~0002#fcXFa|0OzvAOL800002#aQOfK|0ObnAOL810002#VEF(4|0ODfAOL820002#Q277<|0N=XAOL830002#K=}Xv|0NoPAOL840002#F!=xf|0NQHAOL850002#Ao&0P|0N29AOL860002#5cvQ9|0M#1AOL870002#0Qmp^|0Vi^AOL880002#@b~}!|0VK+AOL890002#;P?Ok|0U{!AOL8A0002#(D(oU|0UvsAOL8B0002#!1w?E|0UXkAOL8C0002#u=oG}|0U9cAOL8D0002#p!fg(|0T+UAOL8E0002#koW)p|0TkMAOL8F0002#fcO9Z|0TMEAOL8G0002#aQFZJ|0S}6AOL8H0002#VE6z3|0Sw}AOL8I0002#Q1}1;|0SY>AOL8J0002#K==Ru|0SA(AOL8K0002#F!%re|0R-xAOL8L0002#Aou_O|0RlpAOL8M0002#5cmK8|0RNhAOL8N0002#0Qdj@|0Q~ZAOL8O0002#@b>@z|0QyRAOL8P0002#;P(Ij|0QaJAOL8Q0002#(DwiT|0QCBAOL8R0002#!1n+D|0P<3AOL8S0002#u=fA||0Pm`AOL8T0002#p!Wa&|0PO;AOL8U0002#koN!o|0QC6AOL2N0000000000NR2&7h#&w}NR0(Sh#&w+IrvD4<#ZWHiv<#XAOJ{(z;q2=|KMgW4<Cd800000UBeF_KmcYg4<Cd800000NR2%Sh#&w+jWq&@AOKZJDgH=_<w(K)14xPRNWthoNCC!3(f)K8NQ(vGeINixg}`(SUH{-_4<Cd800000UBeF_KmcYg4<Cd800000fIYc~AOHY$FGzzuw|yW0098nd<#Y^4i#?)(AOPq+|NsB!NdN!;#s!gwAOHbf!w(;T00000^TTEjA4C8ERY-~DUFl~3|NmwWA4C8EK~zkOC0BhQ098}F0RR91>l9`WA4C8ENQu};_t;2-`YlKgMA%7-JS0eqR|rTuR}gbtNR2`PNQp-X54HkGW6(&ALeNNq_z8E+G3{oMNsBxrNR33T07#8&LeNNyR|rTuR}gbJNR2`PNQp-X54I9WjY7~!gZK${(@2TfNDr^YTU|k1!w(;T00000=qvUA|Ldq`4<Cd800000=o|I_|43udNR2|!NQ3wZcAo3WW{_qs4<Cd800000K~#gs0aa5-WB=%p`v3n-izSMDAOJ{-#Yu}iBuI-#2uM3e5D$Z`0000;jZgtdiB|{@wg5aIiNb##4<A4PNQ*}ZNIORmb9P9LPytAZR|pTb5P<q0e&)LY0002%3lATF00000NsBxrh*TZ_NQ*}ZNIORmb0$cQPyt9|%SeO60Z55g2oJUpfchVQ*TzH*002md=v!SuT*GFN=v(yv|43uYNQ1)xJRga|f40U%4FCX0iRfEhL0rR-=sWcP|2!W_i##NW!VivZ|NsB%g%2M9=p*$1|4EBHB<WE9|Nmw#4<Cd800000NQM7FR8>feEt`8F08>bb`*=-AgZl}8Z%B#QNV?6;%*@Qp%*;rOeE>-J;z+^j14xYol1Kr-NGZcei$^F(J4Y~$b1)BsqyPW_NR3bdNQqY{K!`9~T|r#K4<A4PNQ->{NQ*}(NIOR`4}*>X002mhPytAZS185+ElBs<>yc&;A4C8ENV?6;%*@Qp%*;rM*hu%{NWtm@NQ3$bNr}{dYfOpYNV?6;%*@Qp%*;rOeE>-J;z+^j14xYol1Kr-Nh!ogi$^F(J4Y}<jdUb1b81M9PytAZS13S;FzGY@|Nmw#4<Cd800000TU|k1>F4$T{|_I400000zAXR%0O;2B|NrT3|NsAxNQv4=zr*z?T#v%_C`iHT0!WF_NcZPRiPuQM?*iz}{{R2!ZU6uO4<Cd800000=$rNb|LM>E|NmwWA4C8EK~+IiRZ~cb`$&WA2uOwhNQ*5&dLRIJcSwW#2@j8z0000;iP%WG&CJZq%*@QpNQ->{NcZAM!RiA@jRcZN0l-Kp!$^xqC`da;FpYCC4};18002mhPytAZS13S;Fi4Ai07#2RC`da;Fb{*o0000;jZgtdiB~Ab018Nh#0XnmL0myy!w(;T00000NQ->{NQ*}(NIOR`4}-1%002mhPytAZS185+ElBs<>16-^{|_GkNV?6;%*@Qp%*;rM*hu%{NWtm@NQ3$bNr}`CkB0yN08EMCNV?6;%*@Qp%*;rOeE>-J;z+^j14xYol1Kr-Nh!ogi$^F(J4Y}<jdUb14}-b@002mhPytAZS13S;FzE&V|Nmx?=xg-<|455{07#2RC`da;Fb{$}|Ns9;gTx5F3IG5ATU|k1L0#!Z^#A`4A4C8EzAXR%0O&UK|NrSu|NsAxNQv4>y~Fh=T#v%_C`iHT0!WF_N%!SQ!Ri7?gZc?ciPe8jOo`}7y3NeY%*@Qp%t(uU07&=ZNWtm@NR0%NNCCh}DaA;OM<_@;M=(K+bue>7NR3bdNQqY{K!`Bu761SL4<A4P=)?2>|LIZw|Nlsd+DN(2_fzAgo5UbU!RiA@iO@**;Yf+sNWt#}=)3&?|LcwDl=J`p>Dd1N{|_HT003q#4<Cd800000L03UmNs0eKRY6oiiS|`fNQ3MsgZ=>zjuQd^0F6feNQwPSizOa-AOK0d&CJZq%*@QpiF70cOpQdx2u+E`>uzQbA4C8ENQ3(c508-m002md*hz~#BuV$>NWtm@NR0%NNCCh|DZ@yMM<_@;M=*_ZFb{)e0RR9<jZgtdiB~8<h%iZuJS0eqM<_@;M=%eAFaZDnNR3bdNQqY{#sDBlgT)9*IqnaHhyVZpNQ+$nNQK*Zk4cL>BuI-#C`da;Fb{)G0RR9<jZgtdiB~Ab04+%O+em}^2@j5M|Ns9;iP%Z^<w%LqNWtj?NQ3za509<^002md$VrPlBuV$>NWtm@NR0%NNCCh|DZxmKM<_@;M=*_XFb{(r0ssI=jZgtdiB~8<h%o6N|Ns9FA4C8EM2mDJ1WjYkON(63_(+A@4~U`w002mX`w0(^=l}o!NQu};y3NeY%*@Qp%t?zpBuMw-NWtm@NR0%NNCCh|DZ@yMM<_@;M=*_ZFb{);0RR9<jZgtdiB~8<h%iZuJS0eqM<_@;M=%eAe*pjhNR3bdNQqY{#sCUPgTyFXT|rzyT|r(!U&Ce(A4C8Ez90Yq0O+pq|NrUC{{R1G4<Cd800000=$rBX|LL6m|NmwWA4C8ENsBxrNQ*}(NIOR`4}(Yn002mhPytAZS185+ElBs<={f)Z{|_GkzAXR%0O(%v|NrT){{R1G4<Cd800000Op7HEb|3)h0ssI14<A4PNV?6;%*@Qp%*;rM*hu%{NWtm@NQ3$bNQu=CkN5xp07!}GNV?6;%*@Qp%*;uPJS0f>;z+^j14xYol1Kr-NGZigi$^F(J4Y~$bubTuj{yJxNR3bdNQqY{K!`BuwEqA94<A4PNQv4=xWn}*T#v%_C`iHT0!a7bNWtm?NQ3$bNr}-9kN5xp08EL<NsBxrN%!SQ!RiA@jRcZN0l-Nq!AOfoC_#h4Fi1N`Fb{(^0RR9<jZgtdiB~8@hzRNP{r~@F4<Cd800000=xgx*|4EBHBuI-#C`da;Fb{%({{R0-gTyGl3IG5ATU|k1L0v&!L0{=X@c;ji=sWQL|LF+*|Np)%0002!Eb#yT>9qd;|4512Nxj4MC|r-i^(aWe>H<iK&`I~@NWtm?NQ3$bNr}}DkHY`}08EMKNV?6;%*@Qp%*;uPJS0f>;z+^j14xYol1Kr-Nh!rhi$^F(J4Y}<jdd^&gSP+x07#8c0Z55gC_soX>74%m|4512NVw1UQ{$zZ#2`q)>H|pk;z)_sNWty|NQ3?f508uh002md@JWk2BuV$>NWtm@NR0%NNCCh|DaJ^PM<|2FFi1N`Fb{*D0000;jZgtdiB~8<h%o7@{{R2zSnvP;=_~#J|3rz-NQq1&2<S%d|NlsfOe6^Dw*3G9NQv4=xzG1g<E5L#AV|UL14xO`NcZ7L!RiD^iPz{k`2YXu761SL=nwDz|LN=f|Nlt1OIe0E*2Qf!NQrbL7)*&wBoIjV<4B22BnU{s>I+DT*XRQH|NlsfbR-x|i%cXCNQ+D)2<bTg|Nl&hOe7FUiA*F2=)dm&|455WBnV84Oe7HL{r&&{h4v4QXaN8KL064N|3OwkRY6oqiT+hnOpRp62uZ!o%*@Qp%*@P4y~Fh=T#v%_C`g0sC`^kzJaZrb>u6?>NQ3(c508xi002md*hz~&N%!SQ!RiA@jRcZN0l-Kp!$^xqC`da;FpYCC4};zS002mhPytAZS13S;FiDF)NQ*}(NIOR`4}-D*002mhPytAZS185+3Q2>;2u(Tk4}^*U002pg9!Q1Td6G$sKS+y5C`da;Fb{*F0000;jZgtdiB~Ab04+%O+em}^2@j5Q|Ns9;iP%Z^<w(Km14x7V2}z03508of002yh$VrPoN%!SQ!RiA@jRcZN0l-Nq!AOfoC`da;FhPxRFb{*d0000;jZgtdiB~8<h%o6R|NsAH4<Cd800000NQ1;ETU|k1L0v&!L0`j=z6t;U0O)4z|NrSq|NsAx=v(do|LG(D|NmwWA4C8EzAXR%0O&^T|NrS*|NsAx^TTEjA4C8ENQv4=!Ri7?iO@**<w(Km0!V}U2}z04e@IM;&`FCwN%!SQ!RiA@jRcZN0l-Nq!bpopC_#h5Fi1N`FmrfFjZgtdiB~8@h!E)~|NsAH4<Cd800000=-cf7|LJi4|Nlsd+DN$1_fzAgo5UbU!RiA@_u@#2)=0tb1W1Ga34cpSiSS8_KS}rHNWtm@NR0%NNCCh|DaJ^PM<|2FFi1N`Fmq!_jZgtdiB~8<h%o76|Ns9)iPlVsOe6^CbnO5COp8n;2<fQ)|Nlt1OIe0E*2Qf!NQrbL7)*&&BoIjV<4lQ6BnU{s>I+DT*XUyP|NlsfbR-x|i&P{KOp8n;2<dtM|Nl&hR3s2giA*F2=pXF=|4fTaBnV84R3s4T^8Ww-Q@;=Z008LK?*IS4AOHXWNQuKp#{dKX008L0?*IQti9-lTiP&4i4<Cd800000F~I5h?*IR04<Cd800000i$?^*W{_qs4<Cd800000=^OI@|Bz-b4<Cd800000Q;P>kiTjN-0Est9i+>16WA;eF<^$+8@BjZug}`(KNQpxTTf=594<Cd800000Q;P>kiTjOk1BJj3N$|n`0*N<Bi+>16WA;eF<^$;c?*IQtg}`(KNQpxTTf=6MQ;Qc!iTgy0PXvuZ4~5c2jamN>Ny5SS1VK5&e+EH=`2>G-NQ-j_Nn_DLgXscAg~?2dMArC7iv~=I21JQl1b$30$ua-y7!MzS00000Nr^g*JQ7Ta0Z3!YL^;oWE{#+P0z^65eGg1y*Gh|A)(}cLT-FGE1C3V!OpO%INMp)KjSS96i#bU-_<zAjm|MdSA4C8E==1CU|3r&R1VxQm|LJ=F|NmwWA4C8E>Fe<S|Bz-b4<Cd800000NQ*}ZNQ(f&4<Cd800000>8tAh|Bz-b4<Cd800000Q%H&XNQ3MUi$?^5zyUi4iAMx~TTF{f2#rwxNMp){(n*aB$w-MYem{fg0@3(LW6({F1kp*0I7m7Ed?D*8jZptcn9=%3W6Dj91j$K_48ci@I7o{zNICa@42jT%z(|QXNr^CZ*GPlJ5L?5LNQrbL2<S%X|No0a1W1c?Bnaz~W{_qs4<Cd800000=_~L5|Bz-b4<Cd800000Q@;=Z008Kf?EnA2AOHXWNQuKp#{dKX008KL?En8ri9-lTiP&4i4<Cd800000F~I4m?En8}4<Cd800000i$?^*W{_qs4<Cd800000={x8D|Bz-b4<Cd800000Q;P>kiTjN-0Est9i+>16WA;eF<^$;U?En8rg}`(KNQpxTTf=594<Cd800000Q;P>kiTjOk1BJj3N$|n`0*N<Bi+>16WA;eF<^$-x?En8rg}`(KNQpxTTf=6MQ%H&Xi+==*6GV+q|BXTqh0+g6!om0iK{>&H34{Lx508QX002mfO9)6~$Aj+zh5zyo5KO`N@<b0T5%Lca2}FrY1b$C3(lPey6%QW(@(&RPjWhuA4-pDTW6(MNeKd_k5&}dy$bAz`W5)7A4-iDb5N1LTE=0iyb_0z@0Z5HB(MV&^NR1TH@(&OKW)CjNce-W|@4#E~K@Tdz!w(;T00000NQvL*fa(ALi+cn_jZgpSYXATL4<A4P>3i<~|Bz-b4<Cd800000NQ*}Z@(&OI!w(;T00000=^N<(|Bz-b4<Cd800000Q%H&XNQ3MUi$?^5zyUi4iAMx~Ye<WG2#rwxNMp){(nyUA&+-ou0e(w^=mOFBNMq1QjWpNt4-gJ!4=%`eDeE&2A4C8EjZptcn9=%3W6DU4G|xzl49D^h5DxMW5CLWnF35HciO_|>@(&RS@(&RPb<#+K#1LD<4<A4P@(&S2BnaqL=l}nULj>{<5JV&h>3skH{|_I400000>D%o8|Bz-b4<Cd800000Q%H&XzbF6z0O&I6|Nlt3000000RR91NQoFo$3O@G0000;$3PGO0000;iBK5FKp+4B003LV4<Cd800000NQ*}ZNQ-w6NQJ<3GmA(Vi%=X$h4#4r|NsAV1_M?ci$)kZ!HLEXP4R=m0V&9X#sP^}9EnFDiFX*o4<A4PG19sJ|NsB%$`2oa00000NQ3MMzYqWb0O+FW|NltG000000LMTG00000NQ1-(!w(-s003q#4<Cd800000F~I35>;L~|4<Cd800000Q%H&XNQ-|6NQM7(BS?#T5J-jpbqYv{-&^V7<NyDV=v(Li|4517Tj|o{|Nmx?=u7AS|LfLf4<Cd800000NQ(zZg}`(mQ%H&XNQuYjEa(6KNXG*J0002TLkIu>003LV4<A4P^TTEjA4C8E>8s@b|Bz-b4<Cd800000i$@5<W{_qs4<Cd800000>HFmW|Bz-b4<Cd800000NQwCC1`i(qNQux$i%<|qh0=BO^TTE?4<Cd800000NQ*y6h5vL2=@aGu{|_GkF~GwQ9{^@94<Cd800000>09Ri|Bz-b4<Cd800000NQwCC1`i(qNQux$i%<wih0=BO^TTE?4<Cd800000NQ*y6h5vL2>GS6Q{|_GkF~GwQ9{^@94<Cd800000>HFpX|Bz-b4<Cd800000NQM7&J5xwIH%N*5e+TOrNI5fo6G)3&5J-jFb@DO5Tf=4#A4C8ENQ-+2=%45R|44<vNDoBATf=4#A4C8EF~GwQ9{^@94<Cd800000NQ*z|c<2BB4<Cd800000=^N|+|Bz-b4<Cd800000NQM7&J5xwIH%N*5d<W|oNI5fp6G)3&2uOw7b@DO5Tf=4#A4C8ENQ-+A=s)NG|44<vNDoBATf=4#A4C8EF~GwQ9{^@94<Cd800000NQ*z|80Y{04<Cd800000>09Oh|Bz-b4<Cd800000NQM7&J5xwIH%N*5eFy6pNI5fq6G)3&5J-jFb@DO5Tf=4#A4C8ENQ-+2=&$4d|44<vNDoBATf=4#A4C8EF~GwQ9{^@94<Cd800000NQ*z|h~xkN4<Cd800000>8s-Z|Bz-b4<Cd800000NQM7&J5xwIH%N*5eh2FqNI5fn6G)3&2uOw7b@DO5Tf=4#A4C8ENQ-+A=x^u$|44<vNDoBATf=4#A4C8EF~GwQ9{^@94<Cd800000NQ*z|Naz3m4<Cd800000>FeeH|Bz-b4<Cd800000NQM7&EJ%w7NIAxJ6zd|8NQ-|ENQM7&7)Xl;NICFy5J)-3f9ib@NQ-|6NQM7(=tzn9!w(+-^TTEjA4C8ENQ*z|XypI@4<Cd800000>FePC|Bz-b4<Cd800000NQ*`YQ%H&PNQr(3NQp-f=nLWh|4517=mX*Z|4510Tf+|@KmcYg4<Cd800000RZ~cb^+<#42uO=w2uO=V5J-zt2uO)@5J-u82uO)n5J-te2<XP(|Nlsd@94hZ|Nlsd-{`jB|NlsX#0W@<*jru0W{_qs4<Cd800000NQ*`gQ%H&PNQr(BNQp-X=!@Y0|4517=!4+@|4510Tf+|@KmcYg4<Cd800000RZ~cb^+<#42uO=w5J-zd2uO=l5J-u02uO*05J-tv2uO)W5a>qW|Nlsd@8~|@|Nlsd-{>~r|NlsX#0W@<*jru0W{_qs4<Cd800000NI5qTgpUCL08>bb`+adpi+>PEh5rwQ^Z)<=NQw98{O14vNQpxbi%1xYQy7Co9084S0y**zgt!0z0F7}0Ir0yL2mt^9Im!=&kN^MxgTeucQy7a-AcOh=4}>NG004vf{||*Q0RR9<iQh<x##`xm-~az+4<Cd800000NQ-|6NQM7(cSwo%=#S?A|44~L2#ZJ<i&GebLmUB(aRNE=bWe?O0Xgyygtq_y06EHZbA!SGiBlMhP#}Z){||(*0001k`T-Ax%K!iXNQvJ_iN;&$l;!{b4<A4Pi+do2{||*_|NsAqa~Q`%AOQdX07!}0Tf=4#A4C8E=$qpI|44<vbUsLlLkR1I=!@e2|44<vbS_AVLlEf&|Ns9FA4C8Ei%TGd$q$8s|Ns9;iP(vA7{@~(|NsC0Tf=4#A4C8EF~D2H4<A4PgL@$Vb)QIy*vCU400000Tf=4#A4C8EgL@zW4~2vO|Nraa4<A4PNQvJ_iN;&$Jl_BR4<A4PNQvJ_iN;&$jNt$O4<A4PF~GyW0RR91=$qyL|Bz-b4<Cd800000Q%H&XNQ*y6h5vLM=-=W0|44<vbSg-R1B*Z$i9-lm!w(;T00000NQw98K;{4cNQncBKpcrf2wTGsA4C8ENQ(pO)R1N_4<Cd800000>8s@b|Bz-b4<Cd800000RZ~cb`$&WA2uO>65J-jpbsk8I14xPANQ-L-NQnmMY~BC=NQ1-(NQvlMUBhOO=$qmH|4517NQpxbNQvF(%-#S0gL@$Ub=pXaa|nw@Aceqw8-w@(b;?MC#0W@<-&<Yj_~ZZo4<Cd800000NQ1-(NQvKDUFkC2|Nmx?K~z;!Op9j-NQwJMi*FE3h2(V!NQLbWgo6M808NGDbS_AR?Q|(fiQY_!=SYd&=o{hx|4517NQpxT=uh4M|ATuV0(2=ziRfEhL0rR-NQvL*xZMB$O@-u14@K-qiRfEhL0rRT4<Cd800000NQ-k2i$)-Yz<Cve`2TgsNQvKDT|r#w)ZG974<A4PNQvKDT|r#w^xpsf4<A4P=xf~n|LdS;4<Cd800000NI5rjTT@7h`+OBhi+>16h5vO_NQu~6!w(;T00000NQ-|ENQM7&>*ylj|Nlsd-$;o=5a_1d|Nnz~ApUjKNQ-j_i$)-Yz<yqX_yKjqNQvKD>DS`_{|_I400000>5Jq4{|_Gk=;Po2|4517NQpxT=x5yj|ATuV0(F&0i*pc*Mj(a2c@~5C|8<2(iQil47~KE=4<Cd800000NQvKD={Mg0|4517Tj|c*|NjpkKmcYg4<Cd800000Q%H&XNQ*z{gx~-FG15qdz(|P$bOVb}9Enp1Tf=6M>C52%|Bz-b4<Cd800000>kVcPA4C8EInIA1Oo_)#i$@5F(M^TGbOb>INF0qp0Xgt><4B44!w(;T00000Iq-c5NQ-|EiNfpC^TTG4NQ*y%#sM+X>C@u>{|_Gk>099c|Bz-b4<Cd800000NQ3MczbF6z0P+tJL?j64Y~cU@@(&P1BnU{l000000RR91NXI}300000NXI}B00000@(&RJNQqDw$3P$e0000;gTxra4<Cd800000NQ*}ZNQ-w6NQJ<3GmA(Vi%=X$h4#4r|NsAV1_M?ci$)kZ!HLEXP4R=m0V&9X#sP^}9EnFDiFX*o4<A4PG19sJ|NsB%$`2oa00000NQ3MMzYqWb0O-=+|NltG000000LMTG00000NQ1-(!w(-s003q#4<Cd800000F~I4G;s5_;4<Cd800000Q%H&XNQ-|6NQM7(BS?#T5J-jpbqYv{-&^Ss+W-HM=xg2o|4517Tj>JY|Nmx?=v&?Y|LfLf4<Cd800000NQ(zZg}`(mQ%H&XNQuYjJl+5QNXG*J0002TLkIu>003LV4<A4P^TTEjA4C8E>C4&w|Bz-b4<Cd800000i$@5<W{_qs4<Cd800000=?mNc|Bz-b4<Cd800000NQwCC1`i(qNQux$i%<|qh0=BO^TTE?4<Cd800000NQ*y6h5vL2>66?4{|_GkF~GwQ9{^@94<Cd800000=?mQd|Bz-b4<Cd800000NQwCC1`i(qNQux$i%<wih0=BO^TTE?4<Cd800000NQ*y6h5vL2>0{jg{|_GkF~GwQ9{^@94<Cd800000>8soS|Bz-b4<Cd800000NQM7&LsLkJ`(_U=2X_za9}gdZ00000W)Cg{b`nU7TM$Tv+ja3Vz+1x)A4C8ENQ-+2=(pYf|44<vNDoBATf=4#A4C8EF~GwQA4C8ENQ*z|nBD*X4<Cd800000>1*Nt|Bz-b4<Cd800000NQM7&LsLkJ`|=ME4`vT8$afFx8xJ1<@(&OTW)CjNb`D63TL?&n+jZ?Rz+1zRNQ-+A=;z!2|44<vNDoBATf=4#A4C8EF~GwQA4C8ENQ*z|$lL$_4<Cd800000>5Ja~|Bz-b4<Cd800000NQM7&LsLkJ`(_U=2XhbW9}gdZ00000W)Cg{auP_3TM$Tv+ja3Vz+1x)A4C8ENQ-+2==a(G|44<vNDoBATf=4#A4C8EF~GwQA4C8ENQ*z|*xCR84<Cd800000>5JI^|Bz-b4<Cd800000NQM7&LsLkJ`|=ME4`vT8$a4?t8xJ1<@(&OTW)CjNat=s~TL?&n+jZ?Rz+1zRNQ-+A=(pYf|44<vNDoBATf=4#A4C8EF~GwQA4C8ENQ*z|nBD*X4<Cd800000>1*8o|Bz-b4<Cd800000NQM7&Lh=s~4`vT8!FmaFHV+?w00000W)CjGb{a^Fe-KE8|8yYo4-gM#4=%`h=XK@l5)U5$W)CjNb`nU7e+Wp0|8?L<iTJ}0A4C8E^TQ7xKmcYg4<Cd800000NQ*z|XxRV%4<Cd800000>Fd`2|Bz-b4<Cd800000NQ*`YQ%H&PNQr(3NQp-f=v&tR|4517=u_7J|4510Tf+|@KmcYg4<Cd800000RZ~cb^+<#42uO=w2uO=V5J-zt2uO)@5J-u82uO)n5J-te2<R5p|Nlsd@8}NJ|Nlsd-{=O`|NlsX#0W@<*jru0W{_qs4<Cd800000NQ*`gQ%H&PNQr(BNQp-X=-bu*|4517=+o8z|4510Tf+|@KmcYg4<Cd800000RZ~cb^+<#42uO=w5J-zd2uO=l5J-u02uO*05J-tv2uO)W5a^cG|Nlsd@92)z|Nlsd-{^+b|NlsX#0W@<*jru0W{_qs4<Cd800000@(&OXW)CjNdIk@KU;zLCW)CjGQ%H&Xc4kP6e-KE8{||-v0002!MBV@YNQpxbi%1xYQy7Co9084S0y**zgs=br0F7}0Ir0yL7y$qPIm!=&hyVZpgTeucQy7a-AcOh=4}=y0004vf{||*J0RR9<iQh<x##`y})&KvHNQ-|6NQM6og{uGn0O;P_|NlsdLkNpV7>iRFgF_qvjd21w@^ns(aRE8<4}_io00244bV`H50f|!>i%=kg`u`7v$N&HUgZcpvh06c{07!}7NQuT<=`-B_{|_Gki+do2{||+2|NsAqa~Q`%AOQdX07!}0Tf=4#A4C8Ei%TGd$#t(tiP(vA7{@~(|NsC0Tf=594<Cd800000=&RWO|44<vbWTW#LlEix{{R0EA4C8E=#$w0|44<vbT&wdLkQ_h|Ns9FA4C8EgL@zWb)QIy*vCU400000Tf=4#A4C8EgL@$Vb%*QbF~GwQA4C8EF~D2H4<A4PNQvJ_iN;&$l-B?M4<A4PNQvJ_iN;&$1l0fkzX1RM0O+dQ|Nmw#4<Cd800000Q%H&XNQ*y6h5vLM=nvTc|44<vbSg-R1B*Z$i9-lm!w(;T00000=#$(3|44}gi$ENSLkL^L4<Cd800000NQ(pO)R1N_4<Cd800000>C4vt|Bz-b4<Cd800000RZ~cb`$&WA2uO>65J-jpbsq8$5Ccew-$;vV2=WgR2IzXz|NlsX#0W@<=v!UG=-b!-|4517NQpxbNQvF(9Mk{*gL@$Ub=*jca|nw@Aceqw8-w@(b<9YE#0W@<-&<YjnA-pU4<Cd800000NQ1-(NQvKDUFj0j|Nmx?K~z;!Op9j-NQwJMi*FE3h2(V!NQLbWgo6M808NGDbS_AR?Q|(fiQY_!=SYd&=v&wS|4517NQpxT=%3R6|ATuV0(2=ziRfEhL0rR-NQvL*$kPA+O@-u14@K-qiRfEhL0rRT4<Cd800000NQ-k2i$)-Yz<Cve`2TgsNQvKDT|r#wRMY?e4<A4PNQvKDT|r#w^wj_V4<A4P=zG%t|LdS;4<Cd800000@(&OXW)CjNdIEG@W)CjGQ%H&XcM?d8e+Wp0|8-GFiP&4i4<A4PNQ-|ENQM7&?&wO}|Nlsd-$;o=5a{mF|Nnz~ApUjNNQ-j_i$)-Yz<ySP_yKjtNQvKD>2KNp{|_I400000=_A_z{|_Gk=nLEb|4517NQpxT=&#ZL|ATuV0(F>3i*pc*Mj(a2c@Bg4|8<B+iQil4kkbGENQvKD={MB>|4517Tj{RR|NjpkKmcYg4<Cd800000Q%H&XNQ*z{wA%mwG15qdz(|P$bOVb}9Enp1Tf=6M>D$%+|Bz-b4<Cd800000>kVcPA4C8EInIA1Oo_)#i$@5F(M^TGbOb>INF0qp0Xgt><4B44!w(;T00000Iq-c5NQ-|EiNfpC^TTG4NQ*y%#sM+X=>ysS{|_Gk>5JC?|Bz-b4<Cd800000RZ~cb{fYCxFaQ7mNQ3MM=zG@x|44}_iC73o$3PGO0000;$3PeW0002TKp+4B004<tB*#D~00000NQ1-(TV2Bs9{^@94<Cd800000NQ*}hNQ-wENQJ<3GmA(di%=v;h4#4r|NsAV1_M?ki$)+h!HLEXP4NR)2r0;e#sP^(D2aC<iB}}U4<A4PG19sJ|NsB%$`2oa00000NQ3MMzYqWb0O;b?|NltG000000LMTG00000NQ1-(!w(-s003q#4<Cd800000F~I4G(*OTv4<Cd800000Q%H&XNQ-|ENQM7(BS?#T7)XWxbqYv{-&^S+(EtCC=*!gq|4517Tj>(e|Nmx?=)2Va|LfLf4<Cd800000NQ(zZg}`(mQ%H&XNQuYjoYepSNXG*J0002TLkIu>003LV4<A4P^TTEjA4C8E>5I|-|Bz-b4<Cd800000i$@5<W{_qs4<Cd800000=^NPp|Bz-b4<Cd800000NQwCC1`i(qNQux$i%=Lyh0=BO^TTE?4<Cd800000NQ*y6h5vL2>GRP4{|_GkF~GwQ9{^@94<Cd800000>1)#e|Bz-b4<Cd800000NQwCC1`i(qNQux$i%<|qh0=BO^TTE?4<Cd800000NQ*y6h5vL2=@ZcZ{|_GkF~GwQ9{^@94<Cd800000>D$x)|Bz-b4<Cd800000NQM7&J5xwIH%N*5e+TOrNI5fo6G)3&7)XWNb@DO5Tf=4#A4C8ENQ-+A=>O9H|44<vNDoBATf=4#A4C8EF~GwQ9{^@94<Cd800000NQ*z|*wX+14<Cd800000={wK=|Bz-b4<Cd800000NQM7&J5xwIH%N*5d<W|oNI5fp6G)3&5J-jFb@DO5Tf=4#A4C8ENQ-+I=#SO^|44<vNDoBATf=4#A4C8EF~GwQ9{^@94<Cd800000NQ*z|Xx0D!4<Cd800000=?l^S|Bz-b4<Cd800000NQM7&J5xwIH%N*5eFy6pNI5fq6G)3&7)XWNb@DO5Tf=4#A4C8ENQ-+A=<n12|44<vNDoBATf=4#A4C8EF~GwQ9{^@94<Cd800000NQ*z|$kYG-4<Cd800000>Fd@1|Bz-b4<Cd800000NQM7&J5xwIH%N*5eh2FqNI5fn6G)3&5J-jFb@DO5Tf=4#A4C8ENQ-+I=nv8V|44<vNDoBATf=4#A4C8EF~GwQ9{^@94<Cd800000NQ*z|=+OWF4<Cd800000>8sKI|Bz-b4<Cd800000NQM7&EJ%w7NIAxJ6zd|8NQ-|MNQM7&7)Xl;NICFy5J)-3f9ib@NQ-|ENQM7(=tzn9!w(+-^TTEjA4C8ENQ*z|NY4NN4<Cd800000>1)#e|Bz-b4<Cd800000NQ3MM=qJwq|1r`?g}`(Ji%<xO&`5*C2*YL%A4C8E>6_C3|Bz-b4<Cd800000NQ*`gQ%H&PNQr(BNQp-n=u6K3|4517=tIu`|4510Tf+|@KmcYg4<Cd800000RZ~cb^+<#42uO=w5J-zd7)Xm#5J-u07)XhG5J-tv7)Xgm5a<TZ|Nlsd@96%`|Nlsd-{|(u|NlsX#0W@<*jru0W{_qs4<Cd800000NQ*`oQ%H&PNQr(JNQp-f=*!Lj|4517=)=wb|4510Tf+|@KmcYg4<Cd800000RZ~cb^+<#42uO=w7)Xml5J-zt7)Xh85J-u87)Xg%5J-te80d!0|Nlsd@92Kb|Nlsd-{^MD|NlsX#0W@<*jru0W{_qs4<Cd800000RZ~cb`$&WA2uL|M4}_io002md@O@E8i+>nMh5rwQtN;K2iPlJo$LIpk|Nlsd#Yl-m7)XiV=p)Vl|ATud0(EnXMJR*#0S|<+0001k`2TfcNQ1-(NQv%9iQijY>5J3<{|_GkNQ-|ENQM7(Pl?t@iO1-*&;S2OiN#2XLl8)b-{{uN|Nnz~DE@UOi$y4d`2TcJgZKe;8AyY~2uO+UNQvKDUFibS|Nmx?0apkCS0qS-#0W@<*jru0=*!ao|450&NQpxb>$GN&=)2PY|450&NQpxj=~Vy!{|_I400000NQ1-(NQv%9iQijY>G#q9{|_I400000NQ1-(NQv%9iQijY=}*i5{|_HT003q#4<Cd800000Q%H&XNQ*y6iSS5;|8yDXT+;vlNQJ<3CrF6{i$ElaLkL^L4<A4PiPlJo$LQY9|Nlsd1B*Z;i9-lm!w(+-NQ(pO*N|o|4<Cd800000>D$l$|Bz-b4<Cd800000RZ~cb`$&WA2uO>67)XWxbtXuQ14xPANQ-L_NQnlELkNjR2<QgN|NlsX#0W@<=v!UG4<A4P=u^x8|4517NQpxjNQvF(l*|ABgL^3cb=XLYa}bM0D22d&6NC5xb;wAA#0W@<-&<Yjz|jByNQ1-(NQvKDUFq`B|Nmx?h4za_2z3R6_yK=ZRZ~cb`$&WA7)Xn65J-zh7)XWfbqPp?zz>9#0000;h3#}eNQJ<3J4lJ%NQv+0(8~Y+NQvJ_i9-<R6wCkrgL^0fNQu~VJ4l1X7+YP#4<A4PgXjT+ZzKVUM+iuX_`_z9NQvJ_i9{p_=rhUx|455OBnU`_?MM$r#Ylt17+YP#NQ-kAi&iLw(s>nw`u}ycNQ1-}NQvKDUFky6|Nmx?NQ1-}NQvKDUFo99|Nmx?=<CS;|1rSpj1M1x00000NI5rjTT@7h`+OBhi+>PEh5vP2NQu~6!w(;T00000NQ-|MNQM7&>*x~E|Nlsd-$;o=80c2Y|Nnz~DE@WSNQ-k2i$*Agz<y?f_yKjqNQvKD>4(q%{|_I400000iPq@}(f|Ku4<Cd800000=*!Um|4517NQpxb=nu;O|ATud0(Ff@i*p!@Mks~Ac@~5C{||+E|Ns9;iQil4e9-^@4<A4PNQvKD>EFoz|4517Tj^%c|NmwWA4C8EQ%H&XNQ*z{bkP6*G15qdz(|P$bOVb}B#Bc9Tf=6M>ATMV|Bz-b4<Cd800000NQ+MpNQKFCCyPNO0nj<dem09&2m!)5)_x>Ni+>o6PytAbPY_6j$#vcjA4C8EIo5s@iO`Ez2m!)5)_>eciTJ}0A4C8ENQuwuvkxBtNQ*y%#sM+X>2t^b{|_Gk=^M`f|Bz-b4<Cd800000Q;GY(FaQ7mNQ3MU@(&S2Bnar)%>V!L4-iBo2#Ht-NXI}B00000@(&RJNXI}J00000$3P$e0001qSR}_lC;$Ke07!$x5L?3!A4C8ENQ*}hNQ-wENQJ<3GmA(di%=v;h4#4r|NsAV1_M?ki$)+h!HLEXP4NR)2r0;e#sP^(D2aC<iB}}U4<A4PG19sJ|NsB%$`2oa00000NQ3MMzYqWb0O&%@|NltG000000LMTG00000NQ1-(!w(-s003q#4<Cd800000F~I5h$p8Ol4<Cd800000Q%H&XNQ-|ENQM7(BS?#T7)XWxbqYv{-&^T{#{d72=$p*{|4517Tj_Gf|Nmx?=!?w%|LfLf4<Cd800000NQ(zZg}`(mQ%H&XNQuYjY|Q`vNXG*J0002TLkIu>003LV4<A4P^TTEjA4C8E={v~(|Bz-b4<Cd800000i$@5<W{_qs4<Cd800000>5I<)|Bz-b4<Cd800000NQwCC1`i(qNQux$i%=Lyh0=BO^TTE?4<Cd800000NQ*y6h5vL2>Ep)#{|_GkF~GwQ9{^@94<Cd800000>8r^9|Bz-b4<Cd800000NQwCC1`i(qNQux$i%<|qh0=BO^TTE?4<Cd800000NQ*y6h5vL2>GQ?^{|_GkF~GwQ9{^@94<Cd800000>08SG|Bz-b4<Cd800000NQM7&LsLkJ`(_U=2X_za9}gdZ00000W)Cg{b`nU7TNp@%+ja3Vz+1x)A4C8ENQ-+A=-12t|44<vNDoBATf=4#A4C8EF~GwQA4C8ENQ*z|xXb_l4<Cd800000=?lyM|Bz-b4<Cd800000NQM7&LsLkJ`|=ME4`vT8$afFx8xJ1<@(&OTW)CjNb`D63TM$Tv+jZ?Rz+1zRNQ-+I=qJqo|44<vNDoBATf=4#A4C8EF~GwQA4C8ENQ*z|2+aTg4<Cd800000>08ME|Bz-b4<Cd800000NQM7&LsLkJ`(_U=2XhbW9}gdZ00000W)Cg{auP_3TNp@%+ja3Vz+1x)A4C8ENQ-+A=%>p6|44<vNDoBATf=4#A4C8EF~GwQA4C8ENQ*z|h|2%}4<Cd800000>FdP*|Bz-b4<Cd800000NQM7&LsLkJ`|=ME4`vT8$a4?t8xJ1<@(&OTW)CjNat=s~TM$Tv+jZ?Rz+1zRNQ-+I=-0;o|44<vNDoBATf=4#A4C8EF~GwQA4C8ENQ*z|xW@ng4<Cd800000=}XA}|Bz-b4<Cd800000NQM7&Lh=s~4`vT8!FmaFHV+?w00000W)CjGb{a^Fe;7!G|8yYo4-gM#4=%`h=XK@l5)U5$W)CjNb`nU7e-KE8|8?L<iTJ}0A4C8E^TQ7xKmcYg4<Cd800000NQ*z|IK=<|4<Cd800000>HEn4|Bz-b4<Cd800000NQ3MM=oiHQ|1r`?g}`(Ji%<xO&`5*C2*YL%A4C8E>Fdb<|Bz-b4<Cd800000NQ*`gQ%H&PNQr(BNQp-n=&Qv4|4517=%d8{|4510Tf+|@KmcYg4<Cd800000RZ~cb^+<#42uO=w5J-zd7)Xm#5J-u07)XhG5J-tv7)Xgm5a?#a|Nlsd@918{|Nlsd-{@Av|NlsX#0W@<*jru0W{_qs4<Cd800000NQ*`oQ%H&PNQr(JNQp-f=qtqk|4517=p)4c|4510Tf+|@KmcYg4<Cd800000RZ~cb^+<#42uO=w7)Xml5J-zt7)Xh85J-u87)Xg%5J-te80hB1|Nlsd@95sc|Nlsd-{{uE|NlsX#0W@<*jru0W{_qs4<Cd800000RZ~cb`$&WA2=WgQ4`vT8$a)43gr5Ka0A>#^!FEwdi+dPIh5rwQv;Y7AiTCJD#{d6FiN#2XLl{Vj-{^kB|Nnz~C<1kMi$y4d_yG@uyZ`_IgZTe-Wk`d>2uO+UNQvKDUFp`z|NmwWA4C8ENQ-+ANQM7(SBdxN0LK6SNQuQri9--biQnik!~g$-dno>ODT_rYgZTe+TZ8xkbsR{8#0W@<?nsH>TV3hh$N&EiA4C8E0e1)icO*!I#0W@<*jru04<Cd800000=-b8r|450&NQpxb>#1gt=*z|b|450&NQpxj=}G_p{|_I400000NQ1-(NQv%9iQijY>DR~q{|_I400000NQ1-(NQv%9iQijY>0iPB{|_HT003q#4<Cd800000Q%H&XNQ*y6h5vLM=x@dU|44<vbSg-R1B*Z;i9-lm!w(;T00000iTCIs#sB|Ei35v3B#A=^Tf=4#A4C8ENQ(pO)R1N_4<Cd800000>HEe1|Bz-b4<Cd800000RZ~cb`$&WA2uO>67)XWxbuRJ`5Ce-t2uO+FNQ-L_@(&RPiAD(MG{FD=NQ1-(NQvlMUBhNB4<Cd800000=v%@6|4517NQpxjNQvF(+`<3<gL^3cb<#+Sa}bM0D22d&8-w@(b;3x4#0W@<-&<Yjh{pf_4<Cd800000NQ1-(NQvKDUFpKc|Nmx?h4za_2z3R6_yK=ZRZ~cb`$&WA7)Xn65J-zh7)XWfbqPp?zz>9#0000;h3#}eNQJ<3J4lJ%NQv+0(7^xyNQvJ_i9-<RRKfrMgL^0fNQu~VJ4l1X7+YP#4<A4PgXjT+ZzKVUM+iuX_`_z9NQvJ_i9{p_=u^M{|455OBnU`_?MM$r#Ylt17+YP#NQ-kAi&iLw(s>nw`u}ycNQ1-}NQvKDUFmYi|Nmx?NQ1-}NQvKDUFo8~|Nmx?=nKF9|1rSpj1M1x00000@(&OXW)CjNdIEG@W)CjGQ%H&XcM?d8e-KE8|8-GFiP&4i4<A4PNQ-|MNQM7&?&#Xa|Nlsd-$;o=80e0`|Nnz~DE@WVNQ-k2i$*Agz<ySP_yKjtNQvKD=|9E){|_I400000=|ji={|_Gk=$pp>|4517NQpxb=ug1^|ATud0(F>3i*p!@Mks~Ac@Bg4|8<B+iQil4u*U!YNQvKD>F2)x|4517Tj@T<|NjpkKmcYg4<Cd800000Q%H&XNQ*z{M8^OBG15qdz(|P$bOVb}B#Bc9Tf=6M>HEb0|Bz-b4<Cd800000NQ+MpNQKFCCyPNO0nj<dem09&2m!)5)_x>Ni+>o6PytAbPY_6j$#vcjA4C8EIo5s@iO`Ez2m!)5)_>eciTJ}0A4C8ENQuwuvkxBtNQ*y%#sM+X=~Kr4{|_Gk=_|zl|Bz-b4<Cd800000NR0(qG9Um*#|Hr>002mdM+h;%!vFvPNQ3MMNQ1-(!$NOwY-M3?0Ap=)Uu0o)VPAA#Y-RvsZF65_VRT_%bYE<20Ap=)Uv6(?WnXM&0Ap=)Uv6(?WnXM;0Aq7sWMOn+Uvyt=W&mSzUu0o)VPAA#Y-|8yb6;+6WMyA$W&mSzUv6(?WnXM;0BCVvWMOn+Uvyt=W&mh$Uu0o)VPAA#Y-|7|V`ybzaB*L3W&k8(Xk}q=abIj~03>5?ZFOvPX>(<CUu<RoBx7%Fb!>ELb7gd2Y-|7|V{db1bYE;{03>5?b7gd2Y-|8yVQ>I(0CI0{bO3W{dSw7>WqAN&Z*^{T0BmJubO3T`XJ~W)a$#<30BLhl0Ap=)Ut?@#VRBz=W&mStb6;a@Wnpq(Y-|8yZF65^Z*^{TUu<RoV{LO^V{dhCbYE<20Ap=)UuJ1;WM6D%0Ap=)UuJ1;WM6D-0Ap=)UuR`>Uu$1%W&mStb6;m=bYE*<Y-|8yZF65|WprP2X?kT}Y-RvsZF65|WprP2X?kT}Y-|8yZF65~ZgXXFbYE;{0Ap=)UukZ0WpZ?1Y-|8yZF662Z+B&KUt(`{Ze(9<W&mStb6;$4cV%*4VsCYBWM6D-0Ap=)Uu|J{Uu<RoV{LO^ZDDv{Y-|8yZF663X>MO^W&mStb6;&~ZeMI{0Ap=)Uvgz_Z+2y0Y-RvsZF668Wo>VEWnXM;0Ap=)Uvg}3cV%*4VsCYBWM6D%0Ap=)Uvg}3cV%*4VsCYBWM6D-0Ap=)UvhPDaAk5|VsCYBWM6D%0Ap=)UvhPDaAk5|VsCYBWM6D-0Ap=)Uv+SBWpZC)Z*^{DUu<RoV{LO^b#QQHa$jO^b#7!|Y-|8yZ*6sKbZK*CbYE$1X>?y~W&mSvZFOvPX>(<CUukY>bYE<20Ap`+WprO@ZfSI1Y-RvsZ*ygIUukY>bYE<20Aq7sV{Bz%a$js_0Aq7sV{Bz%a$jt00Aq7sW@&C@Uu<RoV{>0-X>Md+Y-|8yb6;m=bYE*<Y-Rvsb6;m=bYE*<Y-|8yb6;m=bYF96dSzd1W&mSzUuR`>Uvp`CWnXM;0Aq7sX>N06a&%v8W&mSzUukZ0WpZ?1Y-|8yb6;$4cV%*4VsCYBWM6D%0Aq7sY;SjEa$jO^b#7!|Y-|8yb6;&?cwcO00Aq7sZDDv{Y-|8yb6;&~ZeMI>0Aq7sZE0>_Y-|8yb6;|0ZEtpEUu<RoV{>0}Wo>VEWnXM;0Aq7sa%^vRWpZC)Z*^{DUu<RoV{>0}Y;SjEa$jO^b#7!|Y-|8yb6;|GaByXEUt(`{Ze(9<W&mSzUvhPDaAk5|VsCYBWM6D-0Aq7sb#QQHa$jO^b#7!|Y-Rvsb6<6EaAk5|VsCYBWM6D-0BCVvXJvF>b7^{IUu<RoXmMX>WprP2X?kT}Y-|8%abIa}X>?y~W&mh$UukY>bYE<20BCVvaBpy5Y-RvxabIw6a9?a}0BCVvaCLKNUu<RoXmMX~b#rK6Y-|8%abI+Aa9?a@0BCVvbZ>B9Y-|8<a%paKWpZC^Y+qq=a$$L2XaI0>X>N37a$jt0Utw}`VR>J60B~|?ZggdGUu<k&Z*FA(b7Ns{Ze?;`Y-|8?V_|M?WpZD0baH8KX8-^I0UHB5&;|ei*#H0lRJi~D>;?b;#KHgn6bAqRw8H=YEC&Dpbi@DuTn7LEWW@jfm<Ip=w8j7b)CT|n#K-^tBnSWil+6GCj0gY#G|&J4@CX0^WY7Qq3<&@LbkG0)APE2fgwOx~GzkCzl+XYFNC^M{#Lxf#WC;KO^w0nQfC&Hqq|pEWpa}o~w9x<mv<UzJ#L)l$$O!-d)X@L`+z9{xWYPcs015yAbkYC+6bb+Uq|yKXFbV(ww9)_nL<#@^#L@r%SPB3D)Y1R{YzhDX1k(TihzbAzG}8b7qzV84^wR(T#0mfa1k?Zj*a`pu6x09z><Rz?B-8)@01E&B#MA%(Bntol)YJd}I12y(6x9F!R0{wAWYquvXbS)Ul+^$KfC~Tsq}2calnVd=<kbKFxC;OP6xIL#)C&LrB-Q`_=nDV<G}ZtA{0jg8MAiTQ5DWkSWYz!wBn$umgw_B5I1B&)l-2+LObh@3wAKIrU<?2N)Ybq0bPNCh<kkQGhztM#G}izBtPB7EMArZRzzhHYRM!9h)C>Rsq}Koc_zVC5wATOs3=IGP#Mb}+APoQj6xaX%L=6A{B-j7{SPcLGG}r(CYz+VagxCN7kPQF;l-K|NqzwQ7q}TudxD5aR<k$cI%nbkl^w<CY;0*u(1la%o^bG(2G}!<D5DowUgxLT8I1T^+wAlauR1N?D1lj-pd=3BrwA%mw%nkqm1l#}r@D2a~6x;v*1P=fJl-vLRL=OM}MBM-Xm=6E|1l|At&<_9rB;Ei2><<6{G~NII01yBGblv~|6c7Lagx&xDC=dVul->XTJP-f?<lX=OR1g3FG~WOJXb=DZWZwV(fDixxbl(5}ln?*_wBG;!xDWsU<lg`P)DQpw^xpsf=nwz^1mFMv{15;D6yN{<5D@?XG~fUKBoP1rRNw#qI1vB<WZ(b)Oc4M8gx~-FU=aWSq~HJlbP)gmwBP^#h!Fq)1mOSwtPubJ6yX2=z!3ldB;f!5)DZvxbm0I0_z?gAgy8@G3=#kUl;HpWAQAuo<lz7RL=pf1^x*&hSP}pL1mXYxY!UzfRN?>skP-j@Wa0n+q!IuCbm9O1xDo&W)ZzdC%n|?q<l+DS;1U1;^x^;i^b!C7B;x=75EB3ZbmIU2I1>N>q~iboR1*LI^y2^jd=mfwq~!nq)Dr*z^yL5l_!9sC1m*w#3={wWgysMLOcVeBH0J;RpcDWA^ydHn*c1Q&6zBi{^b`O9B<KJC2o(STWat0?92Ecnbm#y7Fckm*gy;YNL=^x4)aU>IY!v_iB<TPDfE54$ROtWzm=yp3Wa$6@tQ7zNr0D<u&=mjx)ad{J>=gh2<mmtZ02TlM^yvTp6czvg1nK|(C>8(!B<cVEJQe@|MCt$kP!<3HRO$c!WEKDbbm{;9coqNvl<EKfj1~X@r0M_vpcViC^y&Zq#1;Sm1nU3)*cJc)6zc!~>=pn3Wa|I_5ElRdbn5^ABo_bxgzEqQI2Ql_)aw8LTo(WU<m&(ba2Ego^y>frgckq+MC<?ms22bLRO|o$ycYlfWb6O`&=&vzr0f6x<QD({wCn%>_!j^G#Owe63>W|a<m><cBp3hy^y~lsI2Zr`B<%nHR2TpNbnO5Cd>8-#r0oCym>2*6^z8rtz!(4k6z>237#RQnWbXg}JQ)B0bngHEP#FLK^zQ%vkQo2~#P9$A>=^(6gz*3WBpLt!r11a$KpFr5wDAA`R2l#P1o8j>Xc_<j6!HK6d>Q}%B=P_MkQx90bn*ZHuo?gW#PR?C#2Nqq^zr}y+!_D?1oHp?@EQOBMDqXt6dM2lbn^fIFdF~>g!2FYL>mAAl=A=oSQ`KUr1Jm&Y#RUo#Pa|DfExe+<nsUjlp6p5^z#4zs2czP6!ZW8yc+-jH1q%e&>H{%MDzdu<Qo70l=J`p2pj+ar1Ss(92@`uwDbS}FdP5?1oZ#^R2%>R6!ic9XdD0lB=rCPd>jA(boBrKpd0`Ig!KRav>X5cl=T1q$Q%Fw<n;gl>>L09^z{G#0384T1oi*_6deEnWcC05C>;O*boKxLJRJZ4g!TXbP#pjOr1k&*XdM6mwDtf0d>sG)<n{mmm>mEBH1_}hz#RYpWcL66+#LV_wD$l11RekY<oEyoTpj=bH2DAjfF1w<MEL*zlpX*8)cF7Z)E)o;r1}5<FdqN_WcvUAXdeIog!=#ggdYF^l=}bwm>&QD<of^rtRDaX^!oq*z#jkr1pEL0)E@u<6aWAK000000eVsZ0eBDr8w>{skO2SyBme*a8~^|SV6p%Ia0vha01gmF4j4)g3wH>B06!W#Dl;S^000006aWAKL;wH)sJj3E2mk;80000000000EC2uiTmS$7fV=<yv;Y7A074EBi~>jw7={Bu4j_XB0(uG#7(osYLJkN>3jhEBH~;_ui~s-t5WN5Y<^TWy074EBi~>Xs7={Bu4j_XB0+R|37(osYLJkN+3tI{f7(osYLJkN*3jhEBH~;_u$N&HU#JvCiN&x@>07VWEi~>Op7={B#4j_XB0!j)F7(osYLJkN;3j&b}4j4fW5JC<JObY-2OaK4?1OWg5*uDS%0RjL3074EBjRHar7>ol!4j_gEK@KQ`1xF4r0(A-wC_xS&K@J!~4iG{P2uKS8s|pS%Mh+lB4j4iX5JC<JN(%r0WB>pFQ~>}0n7{x3&;$Sg074EBj{-st7>)x)4j_#LLJla51w;-oh6X_nID-d74qyYL0SXQ{K@KoM4k$tnAVLlpLJkl@4hTmJ17iUS4md^*FhLF|LJlB84j4iX5JC<JMhgG{U;qFBya50J0L1_QpaK8@07?!Jj{-#w7>)x%4j_#LLJla51w;-oh6X_nID-dW4qyWR3Jy3y4lqFuC_)Y(LJk;04iG{P2to^R4hX}>%+1cvNDg3w2ZjcW1&sub1CIg#7ytkOAOZjYJjVb3C;$Ke06`8Ag92s_2mk;85C8xGJOTg!P{#lN2LJ#7000005C8xGPyzq|OveBJ1ONa4000005C8xGWC8#HNXGyF1poj5000007ytkOcme<bM8^OBCIA2c06`8Ag92m@2mk;87ytkOlmY+%SjPYVE&u=k06`8Ag92<02mk;88~^|SumS)8Y{vipssI2006`8Ag8~AP3JwTH3jhEB5C8xG&;kGe{Ko(P1poj5000005C8xG<N^Qy_{RVL2mk;8000005C8xG_yPa`^v3`H1poj500000AOHXW3<CfF@W%iDga7~l06`8Ag91kmAOd9y4iG^O2to@05C8xGFarPpT*v?a1poj5000007ytkOL<0Z-SjYeWC;$Ke06`8Ag92s_2mk;85C8xGU;_XEY{&oq2LJ#7000005C8xGbOQhYXvhEm1ONa4000005C8xGhywrsWXJ#i1poj5000007ytkOoC5#=V8{ReCIA2c06`8Ag92m@2mk;87ytkOxB~zHbjSbyE&u=k06`8Ag92<02mk;88~^|S)B^wjh{yl`yZ`_I06`8Ag8~AY3JwTO3jhEB5C8xG^aB6@D9Hc+1poj5000005C8xG2m}BCB*_2&2><{9000005C8xG90ULWAjtp!1poj500000AOHXWFa!Vq9LWFwnE(I)06`8Ag91kmAOdm<4iG^O2t^A35C8xGR0IG3n8^SC1poj5000007ytkOXaoQNl*s@8H~;_u06`8Ag93IA2mk;85C8xGgaiNpxXAziNdN!<000006aWAKm;?X-^vM7JApigX07MQDTn-2T5C8xGumk`A49Wlh2LJ#700000AOHXW!~_5U2+9BdHvj+t06`8Ag92F!4hTjINeT`KM+*P|7ytkO=mY=&B+38(DgXcg07(uIg92I(2t~sH5C8xG1O)&9ILZJ21poj5000005C8xG7zF?TG|B(}1ONa4000005C8xGECm1nFv<V_1poj5000005C8xGKm`B*EXn`>761SM000005C8xGR0RM4ILZJ26951J000005C8xGXaxWOM9KgE1poj5000005C8xGd<6giK*|6A761SM000005C8xGkOcq$Ov(TM6951J000005C8xGqy+!~SjqqY1poj500000AOHXWxCH<JRLTGULjV8(07ecFg92L$4hTmJQ4R=4!vFvP5C8xG+ywvtfXV;=2mk;8000005C8xG@C5(>e98a+1poj500000AOHXW1O@;Ac*+0&LjV8(07ecFg92L$4hTmJQ4R=4!vFvP5C8xGC<Xukq{;vP2mk;8000005C8xGJO%&&pvnLL1poj500000AOHXWPzC@1oXP+HLjV8(07ecFg92L$4hTmJQ4R=4!vFvP5C8xGbOrzb$jSfz2mk;8000005C8xGhz0-v#L55v1poj500000AOHXWoCW{@z{&srLjV8(07ecFg92L$4hTmJQ4R=4!vFvP5C8xGzy<&S?8*QC2mk;8000005C8xG)CK?m=*j>81poj5000005C8xG=mr1)<jMd4IsgCw000005C8xG{00C35X%4m2mk;8000005C8xG5C;GN49fri1poj5000007ytkOBnJQh2+IHeA^-pY07VWEg92O*2mk;8Bme*aKnDN-9LoRyL;wH)06`8Ah5|tj7=r^x4j^?77(@;bK@JE27ytkOXa@iQM9TmFA^-pY07VWEg92O*2mk;8Bme*aga-fsSjzwZL;wH)06`8Ah5|tj7=r^x4j^?77(@;bK@JE2OaK4?tOo!9fXe^>r2zl{07?!Jg8~9*3d0TvP74B83d0TvNefvD4hTmJ0znE62uBM;3JwTG3sDLV2uBN73d0TvNef5A4hT#R5Q72$AOHXW{09I4;LHF2MF0Q*06`8Ag92X)4hTpKQVI?TMhgG{5C8xGAP4{e49x%k1poj500000JOBUyGzb6y2+aTgegFUf06`8Ah5|tj7=r^x4j^9&4j4oZ5J3(ILkn&S4j4oZ5J3(IO$$U07(@;bK@JE2Pyhe`bO-<dNX-BLrvLx|074EBi~>Op7={Bu4j_XB0!IoC7(osYLJkN*3sVXX7(osYLJkN@3sedY7(osYLJkN?3q%SI7(osYLJkN?3jhEBGynhq$Or%cq|E>SvH$=807ecFg91_t4hTpKbi)n^R1Oe>0&5Dx4hT&PL<++W2t^A-!wv`l7ytkO00{s9EY1J_9smFU06`8Ag92O*2mk;85C8xG90>pbFwOt}1poj5000005C8xGFbMzvEY1J_J^%m!000005C8xGL<s-@Sk3?c4FCWD000005C8xGSP1|CRL%eY1poj5000006aWAKYzY7WP|g4UNB{r;07MQT0z(c65C8xGgb4ruh|T~1NdN!<000006aWAKm<a#?#LfTzApigX07MQDTn-2T5C8xGun7PF+|B?02LJ#700000AOHXW#0dZZ*v<d{Hvj+t06`8Ag92F!4hTjINeT`KM+*P|7ytkO=m`J-^v(bODgXcg07(uIg92I(2t~sH5C8xG1PTBE2+sfi1poj5000005C8xG7zzLY1kV5e1ONa4000005C8xGED8Vs0M7sa1poj5000005C8xGKnef={LTOW761SM000005C8xGR0;q92+sfi6951J000005C8xGXbJ!T6wd$u1poj5000005C8xGd<p;n5YGSq761SM000005C8xGkO}|*9M1p$6951J000005C8xGqzV84D9-=?1poj500000AOHXWxC#IOB+mc;O8@`>07ecFg92m<4hTjIQ4R=4!vFvP5C8xG+zJ2yP|pAV2mk;8000005C8xG@CpC`OwRxR1poj500000AOHXW1PcHFNY4NNO8@`>07ecFg92y@4hTXEQ4R=4!vFvP5C8xGC<_1pbk6_(2mk;8000005C8xGJPQB-aL)h#1poj500000AOHXWPzwM6Y|j7xO8@`>07ecFg92m<4hTjIQ4R=4!vFvP5C8xGbPE6gn9l$I2mk;8000005C8xGhzkG!l+OSE1poj500000AOHXWoC^Q|kk0@AO8@`>07ecFg92y@4hTXEQ4R=4!vFvP5C8xGzzYBXyw3ms2mk;8000005C8xG)C&LrxX%Co1poj5000005C8xG=nDV<w9fzkQUCw|000005C8xG{0jg80MGyb2mk;8000005C8xG5DWkS{LcUX1poj5000007ytkOBn$um_|E_TA^-pY07VWEg92O*2mk;8Bme*aKnwr?4A1}nL;wH)06`8Ah5|tj7=r^x4j^?77(@;bK@JE27ytkOXbb=VG|&J4A^-pY07VWEg92O*2mk;8Bme*agbV-xNYDTOL;wH)06`8Ah5|tj7=r^x4j^?77(@;bK@JE2Q~&?~tPB7EaL@n$rU3u|096hUg8~9&3d0TvMhgO13d0TvNDEmC4hTmJRSFIWOA7))3JwTI3rG$K!$=Mgg91Ye4hTgHM+(CZ2uTY^3d0TvMGF7`AOHXW1PuTH$k6})MF0Q*06`8Ag92X)4hTpKPYMnQNech~5C8xGC=CDr^w9tR1poj500000JOBUyJPiN<@X-JNegFUf06`8Ah5|tj7=r^x4j^F)4j4oZ5J3(IK?`mQ4j4oZ5J3(IO$$U07(@;bK@JE2Pyhe`d<_5qFwy`2rvLx|074EBi~>Op7={Bu4j_XB0!IoC7(osYLJkN*3sVXX7(osYLJkN@3sedY7(osYLJkN?3q%SI7(osYLJkN?3jhEBGynhq&<y|pjM4x9vH$=808tJQg91_t4hTgHbi)n^R1Oe>0&5Dx4hTgHL<++W2t^A-!wv`l7ytkO2o3-M6w?3y9smFU06`8Ag92O*2mk;85C8xGBn|)o7}Ed$1poj5000005C8xGI1T^+6w?3yJ^%m!000005C8xGOb!45K+^yJ4FCWD000005C8xGU=9EPJktOF1poj500000Bme*abPfOjIMV<BLjV8(06`8Ah5|tj7=r^&4j^z27(osYK@JE25C8xGoDKj0VAB8pNdN!<000006aWAKunqtKoYMdQApigX07MQDTn-2T5C8xG$PNGiw9^0o2LJ#700000AOHXW+ztQ$u+snkHvj+t06`8Ag92F!4hTjINeT`KM+*P|7ytkO01p5F%+mk=DgXcg07(uIg92I(2t~sH5C8xG91j2h;L`v91poj5000005C8xGFb@C#+|vL51ONa4000005C8xGL=OM}*wX+11poj5000005C8xGSPuXI)YAX|761SM000005C8xGY!3hc;L`v96951J000005C8xGfDZrw?9%`L1poj5000005C8xGln(#^=+giH761SM000005C8xGs1E=D^wR(T6951J000005C8xGybk~X0Mq~f1poj500000AOHXW&<_9r{L=sbLjV8(07ecFg92L$4hTmJQ4R=4!vFvP5C8xG^bY_4DAWJ{2mk;8000005C8xG2oL}OB-8)@1poj500000AOHXW91s8iAk+W<LjV8(07ecFg92L$4hTmJQ4R=4!vFvP5C8xGKo9@`Ow<4W2mk;8000005C8xGR1g3FNYnrS1poj500000AOHXWXb=DZMAQHOLjV8(07ecFg92L$4hTmJQ4R=4!vFvP5C8xGj1T|-aMS<)2mk;8000005C8xGpb!86Y}5b$1poj500000AOHXWv=9IQXw(1yLjV8(07ecFg92L$4hTmJQ4R=4!vFvP5C8xG*bo2!l+*wJ2mk;8000005C8xG><|C|kkkMF1poj5000005C8xG01*HHjMM-BIsgCw000005C8xG6cGRbxYPgt2mk;8000005C8xGC=mbvwA26p1poj5000006aWAKJP`l@u+#tl8UO$Q07MQDRSpOM5C8xGR1p9GxYPgt1poj5000007ytkOXb}JawA26pA^-pY07VWEg92O*2mk;8Bme*agb@G$$kYG-L;wH)06`8Ah5|tj7=r^x4j^?77(@;bK@JE27ytkOtPubJ@YDbQA^-pY07VWEg92O*2mk;8Bme*a$PoYl1l0fkL;wH)06`8Ah5|tj7=r^x4j^?77(@;bK@JE2Q~&?~@DTt2EY$!15di=I06`8Ah5|tj7=r^x4j=+g3Jw@Y4iG^O2uKTg3Jw@Y4iG^O2uBM_3Jw@V4iG^O2tf;M3Jw@Y4iG^O2uuq^4j4xc5J3(IAOHXWND=@5^wj_VMF0Q*06`8Ag92g-4hTgHR0<9VL<;}_5C8xGY!UzfAl3i>1poj500000JOBUyfD!-z9M%8-egFUf06`8Ah5|tj7=r^x4j^R;4j4oZ5J3(IMGI~U4j4oZ5J3(IMGHg@7(@;bK@JE2SO5S3z!CreT-E>o$p8QV08I`Mh5|tj7=r^x4ln{l4j4fW5J3(IMZ?BW4lsiQh5}s*4j4fW5J3(IK?_t04j4qk4iG`c4hTmJL<$ZVM8ggcLB<XUM+*P|Gynhq91{Ql(AEF{x&QzG07ecFg91_t4hTpKbi)n^Tn-R}0&fb#4hTsLL<++W2t^A-!wv`l7ytkOR1*LISl0jl9smFU06`8Ag92O*2mk;85C8xGa1#IkT-N{p1poj5000005C8xGgcAS&Sl0jlO#lD@000005C8xGm=gd1l-B?M4FCWD000005C8xGtP=nLkk<eI1poj5000008~^|Sz!LxfjMo4EO8@`>06`8Ag91wqAbk!HK@JE25C8xG;1d7<yw?B!NdN!<000006aWAK^b-I8_}2gbApigX07MQDTn-2T5C8xG3={wW5ZC|z2LJ#700000AOHXWAQS)q4A=kvHvj+t06`8Ag92F!4hTjINeT`KM+*P|7ytkOL=*r3DA)i0DgXcg07(uIg92I(2t~sH5C8xGU=#oVJlFsK1poj5000005C8xGbQAypIM@IG1ONa4000005C8xGh!g+-G}r(C1poj5000005C8xGoD={6FxUV8761SM000005C8xGuoM6QJlFsK6951J000005C8xG#1sGkNZ0@W1poj5000005C8xG*c1Q&MA!fS761SM000005C8xG>=Xb1P}l$e6951J000005C8xG02KfLT-X2q1poj500000AOHXW6cqpfSl9pmO8@`>07ecFg92m<4hTjIQ4R=4!vFvP5C8xGI28Z@gxCN72mk;8000005C8xGOcekCfY<;31poj500000AOHXWU=;uWeAoZ~O8@`>07ecFg92y@4hTXEQ4R=4!vFvP5C8xGgcSe)sMr7h2mk;8000005C8xGm=yp3q}Tud1poj500000AOHXWtQ7zNpx6KZO8@`>07ecFg92m<4hTjIQ4R=4!vFvP5C8xG&=mjx%-8?_2mk;8000005C8xG<P`t_$k+e>1poj500000AOHXW_!R&E#Ml4-O8@`>07ecFg92y@4hTXEQ4R=4!vFvP5C8xG92Nio@YnzU2mk;8000005C8xGFcts+?AQPQ1poj5000005C8xGL>2%5=-2=MQUCw|000005C8xGSQY>PG}!<D2mk;8000005C8xGY!(0jFxdb91poj5000006aWAKfEEA%EZG158UO$Q07MQDRSpOM5C8xGm=*v4G}!<D1poj5000007ytkOtQG(OFxdb9A^-pY07VWEg92O*2mk;8Bme*a$QA$qMA-lTL;wH)06`8Ah5|tj7=r^x4j^?77(@;bK@JE27ytkO@D>07Y}o(*A^-pY07VWEg92O*2mk;8Bme*a3>N?ZfY|^4L;wH)06`8Ah5|tj7=r^x4j^?77(@;bK@JE2Q~&?~G#3B>sM!DiAprmY06`8Ah5|tj7=r^x4j=+l3Jw@Y4iG^O2ullg3Jw@Y4iG^O2uce|3Jw@V4iG^O2uTZU3Jw@Y4iG^O2uuq^4j4xc5J3(IAOHXWj28d^fZ6~5MF0Q*06`8Ag92X)4hTpKQ3?(SM+*P|5C8xGuonOTtl9tn1poj500000JOBUy#1{YnsM-JjjsO4v06`8Ah5|tj7=r^x4j^X=4j4oZ5J3(IOABra4j4oZ5J3(IO$$U07(@;bK@JE2SO5S31Q-AS_}Tye$p8QV08I`Mh5|tj7=r^x4ln{l4j4fW5J3(IMZ?BW4lsiQh5}s*4j4fW5J3(IK?_t04j4qk4iG`c4hTmJL<$ZVM8ggcLB<XUM+*P|GynhqU>E=ZY})_-vH$=808tJQg91_t4hTgHbi)n^R1Oe>0&5Dx4hTgHL<++W2t^A-!wv`l7ytkOm>2*6^xFUb9smFU06`8Ag92O*2mk;85C8xGv={&Y_}c&f1poj5000005C8xG$QS?s^xFUbO#lD@000005C8xG+!z1=Fx&tC4FCWD000005C8xG@E8C9EZhJ81poj5000005C8xG1Q`GTDBJ)46#x{U}800000AW{GT000000M#G>00000V8tK+00000V89>%00000z`h^=000000000000000fW06900000MF0Q*3IG5A000006951J0000000000oB#j-0000000000000000000000000;feqN000000RR9100000Xo~;<00000jsO4v00000bBh1~00000j{pDw00000>52dV000004gdfE00000_lf`j000009RL6T000001&aUx00000kN^Mx000005sLr-00000kpKVy00000ev1GA00000k^lez00000jf(&P00000lK=n!00000oQnVe00000lmGw#00000ri%ao00000l>h($000009g6?}000004gdfE00000DvJOB000009RL6T00000H;VuO00000mjD0&00000LW=+Z00000nE(I)00000O^W~k000004gdfE00000T8jVx000009RL6T00000#f<;}000004gdfE00000(2W29000009RL6T0000000000000000000000000XNv#;00000jsO4v0ssI25C8xG000002mk;8000000{{R300000a*F@}00000j{pDw0ssI25C8xG000002mk;80{{R30{{R300000eTx7900000k^lez0ssI25C8xG000002mk;81^@s60ssI200000jEevO00000lK=n!0ssI25C8xG000002mk;82mk;80ssI200000n~MMd00000lmGw#0ssI25C8xG000002mk;83IG5A0ssI200000rHcRn00000l>h($0ssI25C8xG000002mk;83;+NC0ssI2000001&aUx00000kN^Mx0ssI2FaQ7m000002mk;84gdfE2LJ#7000005sLr-00000kpKVy0ssI2FaQ7m000002mk;86#xJL2LJ#700000H;VuO00000mjD0&0ssI2C;$Ke000002mk;88~^|S1^@s600000LW=+Z00000nE(I)0ssI2C;$Ke000002mk;8A^-pY1^@s60000000000000000000000000uZsWx0000000000000001ONa4000005di=I00000=ZXLT000001ONa4000001ONa4000005di=I00000vx@)#000002mk;8000002mk;8000005t;x100000uZsWx0000000000000001ONa4000005di=I00000=ZXLT000001ONa4000001ONa4000005di=I00000vx@)#000002mk;8000002mk;8000005rzN&00000wTl1%0000000000000002mk;8000005k~+300000x{Ck+000002mk;8000001ONa4000005di=I00000wTl1%0000000000000002mk;8000005la9700000x{Ck+000002mk;8000001ONa4000005di=I00000wTl1%0000000000000002mk;8000005taY|00000x{Ck+000002mk;8000001ONa4000005di=I00000wTl1%0000000000000002mk;8000005tsk~00000x{Ck+000002mk;8000001ONa4000005di=I00000zl#6>0000000000000002mk;8000005e@(V00000!;1g_000002mk;8000001ONa4000005di=I00000$%_C0000005C8xG000002mk;8000005k~+300000&Wiv5000007ytkO000002mk;8000005k~+300000)QbQB00000AOHXW000001ONa4000005di=I00000x{Ck+00000Bme*a000001ONa4000005di=I00000*^2-G00000C;$Ke000001ONa4000005di=I00000zl#6>0000000000000002mk;8000005gh;k00000!;1g_000002mk;8000001ONa4000005di=I00000$%_C0000005C8xG000002mk;8000005la9700000&Wiv5000007ytkO000002mk;8000005la9700000)QbQB00000AOHXW000001ONa4000005di=I00000x{Ck+00000Bme*a000001ONa4000005di=I00000*^2-G00000C;$Ke000001ONa4000005di=I00000zl#6>0000000000000002mk;8000005e@(V00000$%_C0000002mk;8000002mk;8000005taY|00000&Wiv5000005C8xG000002mk;8000005taY|00000)QbQB000007ytkO000001ONa4000005di=I00000x{Ck+000008~^|S000001ONa4000005di=I00000*^2-G00000AOHXW000001ONa4000005di=I00000zl#6>0000000000000002mk;8000005gh;k00000$%_C0000002mk;8000002mk;8000005tsk~00000&Wiv5000005C8xG000002mk;8000005tsk~00000)QbQB000007ytkO000001ONa4000005di=I00000x{Ck+000008~^|S000001ONa4000005di=I00000*^2-G00000AOHXW000001ONa4000005di=I00000-HQMK00000FoFO8000008)pCj00000FoFO800000>WcsX00000kaz$9000008*cyr00000kaz$900000_lp1k00000V1)nx000007e)X800000V1)nx000001dIRx00000pnCuS000007fJvC00000pnCuS000005sUx;00000FoggB000007YqOZ00000FoggB000009gF|~00000aC-m%000007aITo00000aC-m%00000DU1LB00000u!;Zx000007Z3md00000u!;Zx00000HjDrO00000(0~8{000007Z(5k00000(0~8{00000LyQ0b00000P=Wve000008%_WK00000P=Wve00000Q;Yxr00000uy_Cf000008&LoN00000uy_Cf00000V~hX*00000@P_~Z000007is_i00000@P_~Z00000af|=}00000AbtP<000007jggq00000AbtP<00000e~bVC00000V1obv000007YqOZ00000V1obv00000l8gWV00000z<B@w000007aITo00000z<B@w00000rHlXo00000pn?DZ000008wmga00000pn?DZ00000u#5lz000000C@la000008x#Nl000000C@la00000yNmz;00000@PYsU000008wmga00000@PYsU00000#*6>}00000P<a3V000008x#Nl00000P<a3V00000(To5900000K#BkW000007is_i00000K#BkW00000-;4kN00000V1NJs000007jggq00000V1NJs00000?Ti2b00000(1QQ~000007YqOZ00000(1QQ~000000gV6v00000FnRz0000007aITo00000FnRz0000006^#G@00000u!H~r000007YqOZ00000u!H~r00000DUARC000005PJXs000007aITo000005PJXs00000J&gbW00000K!gAQ000007YqOZ00000K!gAQ00000P>lcp00000pn3oR000007aITo00000pn3oR00000V~qd+00000uz>&o0000086N-u00000uz>&o00000c8vf4000005O@Fp0000086f}w000005O@Fp00000iH!gN00000AZ`Ev0000086yAy00000AZ`Ev00000myG}b00000P-FlA0000086^M!00000P-FlA00000rHudp00000pl$#F000008+QNz00000pl$#F00000v5f!#00000&}0Ar000008-4%)00000&}0Ar00000y^R0>00000pm6{I000007b*Y%00000pm6{I00000$c+F100000ux9`O000007dZd`00000ux9`O00000(~STC00000Fn0g|000007cKw*00000Fn0g|00000-;DqO00000Ky3g3000007c~F?00000Ky3g300000>x}>a00000z-|Bl000008&m)Q00000z-|Bl00000`i%ep00000@MHi0000008&?1T00000@MHi000000361~&00000uyg<b000007kU5y00000uyg<b000007LEV_00000z-j;h000007l8l(00000z-j;h00000BaQ$700000&~E?$000007b*Y%00000&~E?$00000HI4uP000000A>IH000007dZd`000000A>IH00000M~(mh000005N`kg000008z%q&000005N`kg00000QH}rr00000KxF^`000008!`X@00000KxF^`00000TaEw#00000U~d2b000008z%q&00000U~d2b00000WsU#<00000kYxY>000008!`X@00000kYxY>00000Z;k)}00000&~^X-000007kU5y00000&~^X-00000e2xGB00000;A{W@000007l8l(00000;A{W@00000iH-mO00000KyUy6000007b*Y%00000KyUy600000oQ?nh00000aAp7i000007dZd`00000aAp7i00000uZ{o!00000AaMWy000007b*Y%00000AaMWy00000!j1p{00000P-g%D000007dZd`00000P-g%D00000)s6rF00000uy6nX000007b*Y%00000uy6nX00000=Z*jX00000;AQ{-000007dZd`00000;AQ{-00000`Hlbp00000fMEat000008$bX600000fMEat000002#){&00000Kwkg=000008$$p900000Kwkg=000007mok{00000U||3N000008v_6U00000U||3N00000B98z700000AYT9g000008wLOX00000AYT9g00000Esp>I00000uwnoJ000008$AF300000uwnoJ00000H;(`S00000U|;|M000008(IJW00000U|;|M00000L5~0c00000fMWmv000007heDX00000fMWmv00000OpgEn00000AYlLi000007h?bb00000AYlLi00000SC0Sy00000&|&}p000008$AF300000&|&}p00000VUGX+00000fM5Us000008(IJW00000fM5Us00000YmWc`00000P+R~2000007li--00000P+R~200000evbeE00000fL8zj000007li--00000fL8zj00000k&gfX00000a8&>R000008;Jk_00000a8&>R00000ppO6m00000a8dvO000008C?JX00000a8dvO00000tB(Kx00000FjD{k000008vp<R00000FjD{k000000RR9100000?gjt=000003;+NC00000_(uQ$000004FCWD00000*opuE0000082|tP000005WOG(000008vp<R000002mk;8000008UO$Q000007`-3>000008~^|S000002mk;800000_5S~F00000@Bsh-000001poj500000Fcts+000001^@s600000=mr1)000003IG5A0000090vdZ000003jhEB000007ytkO000000{{R3000000MH-+000000ssI2000005DowU000006aWAK000002LJ#7000007XSbN00000=s5rY000002LJ#700000xE=ri000002mk;800000FdF~>000002><{9000007ytkO00000{{R1P00000m>vKC00000|NsAQ000000RR9100000@c;jB00000OdS9K00000`TzfK000009033T000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000L~x)0000000000000000000000000CP)AP00000Hb?*f00000Mo0hv00000R!9H<00000W=H@400000c1QpK00000hDZPa00000mPh~q00000rbqw)00000wnzW~00000#z+7F00000)<^&V00000=12el00000_DBE#0000021x(_000007D)gA00000CP@GQ00000Hc0>g00000Mo9nw00000R!IN=00000W=Q}500000c1ZvL00000hDiVb00000mPr5r00000rbz$*00000wn+d000000#z_DG00000)=2;W00000=1Bkm00000_DKK$0000021)<`000007D@mB00000CQ1MR00000Hc9{h00000MoItx00000R!RT>00000W=a4600000c1i#M00000hDrbc00000mP!Bs00000rb+++00000wn_j100000#!3JH00000)=B^X00000=1Kqn00000_DTQ%0000021@_{000007E1sC00000CQASS00000HcJ2i00000MoRzy00000R!aZ?00000W=jA700000c1r*N00000hD!hd00000mP-Ht00000rb_?-00000wo3p200000#!CPI00000)=K~Y00000=1Two00000_DcW&000002220|000007EAyD00000CQJYT00000HcS8j00000Moa(z00000R!jf@00000W=sG800000c1!>O00000hD-ne00000mP`Nu00000rc3|;00000woCv300000#!LVJ00000)=U5Z00000=1c$p00000_Dlc(0000022B6}000007EJ&E00000CQSeU00000HcbEk00000Moj<!00000R!sl^00000W=#M900000c1-{P00000hD`tf00000mQ4Tv00000rcD3<00000woL#400000#!UbK00000)=dBa00000=1l+q00000_Dui)0000022KC~000007ES;F00000CQbkV00000HckKl00000Mos_#00000R!#r_00000W=;SA00000c1{2Q00000hE4zg00000mQDZw00000rcM9=00000woU*500000#!dhL00000)=mHb00000=1u?r00000_D%o*0000022TJ0000007Eb^G00000CQkqW00000HctQm00000Mo$0$00000R!;x`00000W={YB00000c258R00000hED(h00000mQMfx00000rcVF>00000wod>600000#!mnM00000)=vNc00000=1%|s00000_D=u+0000022cP1000007Ek~H00000CQtwX00000Hc$Wn00000Mo<6%00000R!{%{00000W>5eC00000c2EES00000hEM<i00000mQVly00000rceL?00000wom{700000#!vtN00000)=&Td00000=1>3t00000_D}!-0000022lV2000007Eu5I00000CQ$$Y00000Hc<co00000Mo|C&00000R#5-|00000W>EkD00000c2NKT00000000000000000000000000000000000;M5=h000000000000000000000000000000000004U7N)000000S5p8000004*&oF000004L$$>000000S5p8000004*&oF000004MYF{000000S5p8000004*&oF000004MzX~000001Cjs$000004*&oF000004MzX~000005efhR000000S*8F000004*&oF000004MzX~000005efhR000000S5p8000004*&oF000004NCw3000001Csy%000004*&oF000004NCw3000005fuOc000000S5p8000004*&oF000004NCw3000005fuOc000000Sf>C000004*&oF000004GI7N000004*&oF000004HW<Y000004*&oF000004JZHr000004*&oF000004Kn}$000004*&oF000004VC}^000001C#&&000004*&oF000004VC}^000005hwrv000000S*8F000004*&oF000004VC}^000005hwrv000000S5p8000004*&oF000004VVA`000001C;;(000004*&oF000004VVA`000005i<Y)000000S5p8000004*&oF000004VVA`000005i<Y)000000Sf>C000004*&oF000004GsVR000001C9Uy000004*&oF000004FLcE000005k3F_000004*&oF000004FLcE000001CIaz000004*&oF000004FLcE000001CRg!000000S*8F000004*&oF000004FLcE000001Cam#000000Sf>C000004*&oF000004FLcE000005efhR000004*&oF000004FLcE000005fuOc000004*&oF000004FLcE000005hwrv000004*&oF000004FLcE000005i<Y)000004*&oF000004IKag000005kvq0000004*&oF000004IKag000004*&oF000004VwS}000005k3F_000000S*8F000004*&oF000004VwS}000005kvq0000000Sf>C000004*&oF000004VwS}000005efhR000004*&oF000004VwS}000005efhR000000S*8F000000S5p8000004*&oF000004VwS}000005fuOc000004*&oF000004VwS}000005fuOc000000Sf>C000000S5p8000004*&oF000004VwS}000005hwrv000004*&oF000004VwS}000005hwrv000000S*8F000004*&oF000004VwS}000005i<Y)000004*&oF000004VwS}000005i<Y)000000Sf>C000004*&oF000004VwS}00000104VW000000S5p8000004*&oF000004VwS}000000Sf>C000004*&oF000001C0Ox000000RjL3000002><{9000002>}2A000002?hWF000002?qcG000002?78B000002?GEC000002?PKD000002?YQE000001D5~*000002?ziH000001DOB-000002?+oI000000}cQH000000RR9100000M?*t8AShL0b#8QZAU7^GE-)=Kbz*gHbagR)F*q(TG$|lAE;TMN0000000000000000000000000000000000000000000000{{U4$N>NV000000000000000000000{{X5@Bsh-000000000000000000000{{a6=mr1)000000000000000000000{{d7Fcts+000000000000000000000{{g8OdS9K000000000000000000000{{j9m>vKC000000000000000000000{{mAxE=ri000000000000000000000{{pB=s5rY000000000000000000000{{sC_(uQ$000000000000000000000{{vD5J&(3000000000000000000000{{yEfKdPd000000000000000000000{{#FkWl~t000000000000000000000{{&G*opuE000000000000000000000{{*H;feqN000000000000000000000{{;IypI3?000000000000000000000{{>Jkd^=d000000000000000000000{{^K5WOG(000000000000000000000{{{L7`-3>000000000000000000000{{~MAiW>}000000000000000000000{|2N0L~x)000000000000000000000{|5Oz|SB6000000000000000000000{|8P0MH-+000000000000000000000{|BQ;M5=h000000000000000000000{|ER;MpJm000000000000000000000{|HS000000000000000000000RR911OV~>000000000000000000003;+NC0sssEkWl~t0000000000000004gdfE0sssE&`|&Y000000000000000ApigX0sssEAW{GT000000000000000Hvj+t0RR{P;MpJm000000RR9100000MgRZ+0RR#J7`-3>000000000000000Z2$lO0sssEU{U}8000000000000000c>n+a0RRyI5WOG(000000000000000m;e9(1OV~>00000000000000000000sQ>@~0sssEa8dvO00000v;Y7A00000yZ`_I0sssEFjD{k00000<^TWy00000(*OVf0sssEAXESV00000N&x@>00000-T(jq0sssEa8&>R000000RjL300000^#A|>0sssEfL8zj00000&;$Sg000005CH%H0sssEP+R~200000paK8@00000D**ri0sssEAYT9g000002LJ#700000J^=s#0sssEKwkg=000001poj500000RRI710sssEU|;|M000001poj500000X8`~J0sssEfM5Us000001poj500000c>w?b0sssEAYlLi000001poj500000i~#@u0sssEU||3N000002LJ#700000p8)^>0sssEfMEat000001poj500000wgCVD0sssEuwnoJ000001poj500000$N>NV0sssE&|&}p000001poj500000+5rFn0sssEfMWmv000001poj500000?EwG)0sssEP-FlA000002LJ#7000000|Ed50sssE&}0Ar000001poj5000007XknP0sssE@MHi0000001poj500000E&>1m0sssEKxF^`000001poj500000Kmq^&0sssEkYxY>000001poj500000QUU+~0sssE0A>IH000001poj500000YytoP0sssEaAp7i000001poj500000hXMcq0sssE;AQ{-000001poj500000p#lH^0sssEP-g%D000001poj500000yaE6K0sssEux9`O000001poj500000&jJ7d0sssEz-j;h000001poj500000<N^Qy0sssE;A{W@000001poj500000`2qj{0sssEKy3g3000001poj5000004FdoG0sssEAZ`Ev000002LJ#700000BLe^c0sssEpl$#F000001poj500000Hv<3w0sssEz-|Bl000001poj500000P6Ge{0sssE5N`kg000001poj500000U;_XE0sssEU~d2b000001poj500000asvPW0sssE&~E?$000001poj500000i~|4w0sssEKyUy6000001poj500000rvm^00sssEuy6nX000001poj500000!2<vQ0sssEAaMWy000001poj500000+yejr0sssEpm6{I000001poj500000?*jk;0sssEuyg<b000001poj5000001Oxy80sssE&~^X-000001poj50000083X_T0sssEFn0g|000001poj500000Ed&4n0sssE5O@Fp000002LJ#700000NCW@?0sssEkaz$9000001poj500000T?7CC0sssEuy_Cf000001poj500000bp!wa0sssE0C@la000001poj500000hy(xt0sssEP<a3V000001poj500000n*;y=0sssEz<B@w000001poj500000wgdnG0sssEFnRz0000001poj500000(gXki0sssEpn3oR000001poj500000?F0Y-0sssE5PJXs000001poj5000002?YQE0sssEaC-m%000001poj5000009R&aY0sssEpnCuS000001poj500000G6ett0sssEAbtP<000001poj500000NCf}@0sssEV1NJs000001poj500000UIhRE0sssE(0~8{000001poj500000a|HkZ0sssEuz>&o000002LJ#700000js*Y!0sssEFoFO8000001poj500000qXhr}0sssEP=Wve000001poj500000y9EFM0sssEpn?DZ000001poj500000&IJGf0sssE@PYsU000001poj500000;ROHy0sssEV1obv000001poj500000`~?620sssE(1QQ~000001poj5000007zO|U0sssEK!gAQ000001poj500000GX?+v0sssEu!H~r000001poj500000PX+)00sssEFoggB000001poj500000V+H^K0sssEV1)nx000001poj500000cm@Cf0sssE@P_~Z000001poj500000js^e#0sssEK#BkW000001poj500000qy_*00sssEu!;Zx000001poj500000xds3L0RR&KAiW>}00000Pyhe`00000%mx4e0RR^O0M#G>00000-~<2w00000*aiRq0RR&KV8tK+00000pa=i}00000<^})&0RR&KV89>%0000000jU500000^9BF_0RR&Kz`h^=00000kO2Sy000002L}KE0RR&KfW06900000FaZDn000000RR911OV~>000000000000000000007Y6_U0RRvHq^|$~000000000000000000001OV~>00000000000000000000B?kZi0RR^O;M5=h000000000000000G6w(v0RR*L0L~x)000000000000000I|l#&000jFypI3?000000000000000P6q%00RR^O;MpJm000000000000000S_c3C0RR>N0MH-+000000000000000a0dVY5&#SUpltvE00000NdN!<00000f(HNq5&!@I00000000000000000000Wd#5L5&#SUaDV^+00000O#lD@00000mj?g<5&#SUFmeC@00000A^-pY00000rw0H45&!@I00000000000000000000D+2%k5&#SUaBctq00000DgXcg00000xd#9M5&#SUKxhB}00000A^-pY00000<O2Wz5&#SUkZ}M2000002mk;800000!~y^S5&#SUpl1L8000002mk;800000$p-)cAOHXW00000000000000000000<p%%&5dZ)H00000000000000000000`3C?15&#SU@Mi!300000L;wH)00000rvU%}5&#SUaA5!d000001ONa400000)dc_m5&#SUuz~;p00000761SM000002?ziH5&#SU&|?4q00000NdN!<000008wdaZ5&#SUaD@N>00000A^-pY00000qXYl|5&#SUuz3Ig000002mk;800000EC>Jq5&#SUuzLUi00000A^-pY00000JqQ2*5&#SU;Bf!|00000L;wH)00000AO-*c5&#SUFoXaA000002mk;800000uLA%85&#SUpl|>H000002mk;800000j|2b!5&#SU5P1Lq00000761SM00000Rt5k75&#SUz=Qw*00000QUCw|00000!UX^T5&#SUV1fVu00000761SM000003jzQD5&#SUpkx3500000DgXcg00000j{*Py5&#SU&}IMt000002mk;800000O$Y!05&#SU0Ehqp00000jsO4v000005Cs4L5&#SUAbS7+00000IsgCw00000U<d#J5&#SUFn$0400000egFUf00000a|i$c5dZ)H00000000000000000000KLY>&5&#SUux<bV000001ONa400000d;|ah5&#SUz<2-v00000761SM000009|8aX5&#SU;A8**000001ONa400000;{yNy5&#SUFmV6?00000QUCw|00000h6n%v5C9hd;MpJm000000000000000jR*h$5&#SUkaqw800000NdN!<00000Py_$~5&#SUV0Zuk00000DgXcg00000pa=i}5&#SUFo6I700000NdN!<00000H39$t5&#SU0A&CG00000761SM00000vj_kH5&#SUP+tH500000CIA2c00000jsgGx5&#SUfMx&y00000LjV8(00000!w3KX5&#VV*opuE000000000000000mIVL+5&#SU0D=Gj00000DgXcg00000t^)u75&#SUP;dYM00000O8@`>00000RRaJ35&#SU&~5+#00000761SM00000H3R?v5&#SU;CBE300000ApigX00000dj$Xh5&#SUfPnx200000ApigX00000$p`=d5&#SUkYNA-00000CIA2c00000*$4mt5&#SUuyFtY00000A^-pY00000=?DM-5&#SUz-Ise00000A^-pY00000&;bAd5&#SUz+wOZ000002><{900000`3L|25&!@I00000000000000000000XafKM5&#SUKyLs5000006951J00000Rs#S45&#SU@NNJA000006951J00000Zvg-R5&#SUa9{uc000002mk;800000z61aO5&#SUAbJ1*000002mk;800000!vz2U5&#SUfPw%3000006951J00000ItBm$5&#SUP=o*g00000O8@`>000005eWbQ5&#SUz={9>000006#xJL00000eFOji5&#SU;CKK4000006951J00000_X7X`5&#SUU~~Wg00000MF0Q*00000NCE%=5&#SUaAg1h000006951J00000HUa<u5&#SUAY}jm000006951J00000X9EBL5&#SUAa4Kw00000761SM00000Dgyuj5&#SUFm3<<00000Hvj+t00000bOHbX5&#SUU}gXS000002mk;8000003IYHC5&#SUU}OLQ00000Hvj+t00000^aKC^5&#SUuzCOh00000LjV8(00000lLG(%5&#SU;BNo`00000O8@`>00000!vX*R5&#SUU}pdT00000IsgCw00000F9`qu5&#SUz+nIY00000E&u=k000001O@;A5&#SUz=Hq)000002mk;800000KM4Q;5&#SUfL{Or00000E&u=k00000>jD4(5&#SU0BisN00000vH$=800000)&c+k5&#SUz-Ryf00000r2zl{00000M*;u<5&#SUP-OrB00000761SM00000_5%O_5&#SUuyOzZ00000rU3u|00000q67c{5&#SUV0i!l00000LjV8(00000PYD135&#SU&}skx00000egFUf000003<LlG5&#SUuyz0d000009smFU00000VF>^LAOHXW00000000000000000000^#lL_5&#SU0DAxc000002mk;800000a0vha5&#SUz;plr00000egFUf00000f(ZZs5&#SUKz9HD00000LjV8(00000k_i9+5&#SU;D7)C00000O8@`>00000I|cv%5&#SUpo9Pb000002mk;800000PXqt}5&#SUAb0=(00000Hvj+t00000e+B>m5&#SUaE1T?00000AprmY00000kOTk#5&#SUFnIs~000006951J00000sR9515&#SUKxY5|000002mk;800000)&&3n5&#SU(1HK}000006951J00000c>@3d5&#SUaBlzr00000O8@`>00000Spon65&#SUpk)9600000LjV8(00000a{>SW5&#SU5M}@X00000LjV8(00000$pZiY5&#SU5ODwi000002mk;8000000RsR45&#SUFl_(;000004FCWD00000>;eD)5&#SUz-#~j000009smFU00000Ap`&b5&#SUAa?)&000004FCWD00000q6q*15&!@I000000000000000000005d{DM5&#SUV0!=n000002mk;800000fCc~n5&#SUpoahe00000MF0Q*00000It2g#5&#SU(0u>^00000MF0Q*00000lmP$$5&#SUFkt`y00000C;$Ke00000wg~_L5C9ke=-D6u000000000000000GXVeq5&#SU@Lm7_00000C;$Ke00000R|Wt85&#SUAcX(`000002mk;800000B?SNg5&#SUfO`M{000008UO$Q00000YX$%S5&#SUK!pGR000008UO$Q00000*#rOp5&#SUKzaZG00000LjV8(00000=>-4)5&#SUP=f#f000002mk;800000l?4C*5&#SUz<~e&00000Hvj+t00000r~&{05&#SU@MZu200000LjV8(00000y9odQ5&!@I00000000000000000000&<Owl5C9ke;MpJm000000000000000$O8ZX5&#SUz;FNn00000O8@`>000009|iyb5&#SU;DZ1F00000O8@`>00000lmh?&5&#SUFmM0>000002mk;800000tOfu85&#SUpo#zh000004FCWD00000W(5EM5&#SUz<>Y%000004FCWD00000+z9{x5&#SUAcg<{00000L;wH)00000=mh`(5&#SU0D}Mk00000O8@`>00000Pz3-05&#SUK!5-M000009smFU00000?Fj$?5&#SUaA*Jk00000L;wH)00000mIeR-5&#SUAc_D0000009smFU00000{Rsd75&#SU@Pz;X00000A^-pY000004hjGO5&#SUV0-`o00000L;wH)00000*8%_l5&#SUaB2Vm00000MF0Q*00000^#K3?5&#SUAY=dl00000ApigX00000y#xRN5&#SU(0Kp=00000LjV8(000009|`~f5&#SUFnj<200000A^-pY000006$1bO5&#SU@NED900000ApigX00000FbV(w5&#SUU~&Ke00000L;wH)000000|o#95&#SUaDxB<00000O8@`>00000Knef=5&#SUkYfM<00000H~;_u00000PYM745&#SUP-_4H00000rvLx|00000X9@rS5&!@I0000000000000000000000RI35&#SU@N57800000J^%m!00000c?tjk5&#SUP;CGJ00000NB{r;00000hzbAzAOHXW00000000000000000000AOrva5&#SU;C28200000J^%m!00000IRyX!5&#SUuzUaj000005di=I00000fdK#j5&#SUkYE4+00000ga7~l00000;sF2v5&#SU;9>v(00000nE(I)00000l?DI+5&#SUV2J<#00000vH$=800000q6z>25&#SUKy?5B00000rvLx|00000+5`Xq5&#SUka_?B000002mk;800000x(WaQ5&#SU;Clc700000L;wH)00000%L)Jh5&#SUpoIVc00000L;wH)00000PXzz~5&#SUfPVl000000x&QzG00000+zJ2yA^-pY00000000000000000000_zD035&#JR_(uQ$000000000000000Wdr~K5&#SUpm+cP000001ONa400000s|5f65&#SUK!N}O000001ONa400000{t5s95&#SUuzmml00000$p8QV00000s|El75&#SUP>KKm00000O#lD@000007YhIY5&#SUkca>P00000$p8QV00000S^@w75&#SU@MQo1000002mk;800000z5xIL5&#SU@L>P|00000yZ`_I00000dIJCe5&#SUz;6Hm000002mk;800000T>$_95&#SUuwMWG00000ssI2000000Mgaf-5&#SUFkb)w000001ONa4000003j_cF5&#SU@O1zH00000vH$=8000000Aq4=b98lPW-em@WMy(?XK8bEWpZD1ZC_(-Z*FCC0AF8ZZ(nC@Z(?C=Uu1M|a&uo{b$9?{Z*6dFWprg^E;lwgH~?Q?WN%+*Y;R&=Y+qz_Z*p^AVRd+4W@&C|Utw}`VR>I=Zgg^a0A_MwZDn6%b!}~V0AF8ba$#*{Uu1P{ZFyg5ZfSI1VRCX|d0%C2baHtBUt@1=aBy;OXJ2DxW@#>C0AFKfW@%q!Uvpz&Zf<3AUu<juUt?xwX<uYtb7Ns{Ze?;`b98cPZf5{+a%paKWpZC^Yye+lW@c$$WM6P{X>N37a$jt0UvF+@0AFKfW@%q!UvP41ZggdGUu<k&VRCX|d0%z_Ut?xwX<uYtaB^vGbY*g1Y;0d)a&lpLUuXbdV`gS)Uu0isabIa}X>?y~Yye+lW@c$$WM61;UuR`>Uvp`CWnXM;0AFKfW@%q!Uubb(aBpy5Y-|8uV`gS)Uu0isabI+Aa9?a}0AFKfW@%q!Uubb(aCLKNUu<juUt?xwX<uYtXmMX@ZfSI1Y-RvoV`gS)Uu0isabIU;bYF96dSzd1W&mGfW@c$$WM61;UvO`5Uu<RoUt?xwX<uYtXmMY3Z*X61W&mGfW@c$$WM61;UvPDEXkTn*0AFKfW@%q!Ut@1`WprO@ZfSI1Y-|8uV`gS)Uu0inb6;a@Wnpq(Y-|8uV`gS)Uu0inb6;m=bYF96dSzd1Yye+lW@c$$WM5-*Uu|J{Uu<juUt?xwX<uYtV{>0^X>MO^Yye+lW@c$$WM5-*Uu<u8WpZC)Z*^{DUu<juUt?xwX<uYtV{>0}Y;SjEa$jO^b#7!|Y-|8uV`gS)Uu0inb6<6EaAk5|VsCYBWM6D-0AFKfW@%q!Ut@D$a&>TUWpZC)Z*^{DUu<juUt?xwX<uYtV{>0-X>Md+Y-|8uV`gS)Uu0inb6;t0b7gXLUu<juUt?xwX<uYtV{>0}Wo>VEWnXM;0AFKfW@%q!Ut@D$XJvF>YhP?^0AFKfW@%q!Ut@1`WprO@ZfSI1Y-RvoV`gS)Uu0inb6;a@Wnpq(Y-RvoV`gS)Uu0inb6;m=bYF96dSzd1W&mGfW@c$$WM5-*Uu|J{Uu<RoUt?xwX<uYtV{>0^X>MO^W&mGfW@c$$WM5-*Uu<u8WpZC)Z*^{DUu<RoUt?xwX<uYtV{>0}Y;SjEa$jO^b#7!|Y-RvoV`gS)Uu0inb6<6EaAk5|VsCYBWM6D%0AFKfW@%q!Ut@D$a&>TUWpZC)Z*^{DUu<RoUt?xwX<uYtV{>0-X>Md+Y-RvoV`gS)Uu0inb6;t0b7gXLUu<RoUt?xwX<uYtV{>0}Wo>VEWnXM&0AFKfW@%q!Ut@D$XJvF>YhP?;0AFKfW@%q!Ut@1=b!>ELb7gd2X>MtBUu<juUt?xwX<uYtV{LO^V{Bz%a$jt00AFKfW@%q!Ut?`^UuR`>Uvp`CWnXM;0AFKfW@%q!Ut?`^Uu|J{Uu<juUt?xwX<uYtV{LO^ZE0>_Y-|8uV`gS)Uu0inZF662Z+B&KUt(`{Ze(9<Yye+lW@c$$WM5-#b6;|7Z+B&KUt(`{Ze(9<Yye+lW@c$$WM5-#b6<6EaAk5|VsCYBWM6D-0AFKfW@%q!Ut?`^UvhPDaAk5|VsCYBWM6D-0AFKfW@%q!Ut?`^UuJ1;WM6D-0AFKfW@%q!Ut?`^Ut@1|ZggL4Yye+lW@c$$WM5-#b6;t0b7gXLUu<juUt?xwX<uYtV{LO^a%F9Ac4c2|Yye+lW@c$$WM5-#b6;m=bYE*<Y-|8uV`gS)Uu0inZ*6sKbZK*CbYE$1X>?y~W&mGfW@c$$WM5-#b6;a@Wnpq(Y-RvoV`gS)Uu0inZF65|WprP2X?kT}Y-RvoV`gS)Uu0inZF663VR&C`W&mGfW@c$$WM5-#b6;&~ZeMI>0AFKfW@%q!Ut?`^Uu<u8WpZC)Z*^{DUu<RoUt?xwX<uYtV{LO^a%^vRWpZC)Z*^{DUu<RoUt?xwX<uYtV{LO^b#QQHa$jO^b#7!|Y-RvoV`gS)Uu0inZF668b#QQHa$jO^b#7!|Y-RvoV`gS)Uu0inZF65{X>Md+Y-RvoV`gS)Uu0inZF65^Z*^{TUu<RoUt?xwX<uYtV{LO^X>N06a&%v8W&mGfW@c$$WM5-#b6;|0ZEtpEUu<RoUt?xwX<uYtV{LO^XJvF>YhP?;0AFKfW@%q^d2nT4V{dMBWq5P|Ut?xwX<u}CaAk7<Ut?xwX<uh-Z(?C=a{ymsW@c$$W@%+?WOD#tV`gS)UvqSFbz^j2b#7^IZgT)%V`gS)UvznJWo}_@Wpe;uUq(_vO+{ZtPDEc{0AF8Zb8la0VQyq>WdL79Sx!MsNkaf%Uq?<=Uqwh?Mp8jdMPEonQUG6HR82!)MNULtUjSc6Oiw~VOkYn%MpH#pUsORtOhsP+V{>0_Z)9a(b#P>1bY)*`W&mGbb!KdDcR)Z#Oi4mRUotK-E;RsSb6;|AbYXO5UvqL_Y-Rvva%E*eKu1hTLPK9NE;24P0Aq7sa&L5DbY)+2a$jt00AEQ|O<!bXa%E>}b97~LR82!{Z*FB&VPb4$0CRL?Z*_D)Ku1hTLPK9NE;24P0Aq7sa&L5DbY)*;a$jt00Aq7sZf|5|Uv+R~VRU6*Y-|8yZF668Z**aFWnXh_Uu<RoV{LO^a&L5DbY)+2Y+r0_0Aq7sa&L5DbY)*;a$js_0AFKmb6;|0ZEtpEUu|J{Uu<RoUt?`^Uvgz_Z+2y0ZDDv{Y-|8?bYy96KtM-KNkT(kGA=SMH2_~_WMOn+0Ap=)Uv6(?WnXo0WMOn=Uu<juV{LO^Zf|5|Uv+R~VRU6*Y-RvxabIP4bY*UIX>V>{Y-|8uW@&C|0BCVvWq5RDZggpHZeMI>0Aq7sa&L5DbY)+2Y+r0<0Aq7sa&L5DbY)+2Y+r0_0AF8kc4cyAY;Si!Ku1hTLPK9NE;24P0AFKfW@%q=d2o4YZfSI1Ut@1=aBy;OXJ2DxW@!LuabI#}WOZY7X>V>{Y-RvxabI#}WOZY7X>V>{Y-|8uV{>0}Wo>VEWnXP!cwcO60AF8cZEtR0b97;HbYEWpUt@D$a%F9Ac4c2}VR&C`W&mStb6;*{cVBLAWMyA$Yye|zb6;*{cVBLAWMyA$W&mwrY;131KtM-KNkT(kGA=SMH2_~_Ze##*WnpY=Z(~3}M@&gVLtip3GA=a$UteN#b6<0GVRCc;V{LO^a&L5DbY)*;Y+r0<0Aq7sa&L5DbY)*;Y+r0_0Ap=)Uvh7BVRU6*b8=s7W&mStb6;|AbYXO5Uu0}wY-|8yZF668Z**aFWnXi0Uu<juV{>0}Z**aFWnW}$Uu<RoV{>0_Wp`h0Z)9a(Y-|8uV{>0}Wo>VEWnX4;Z*5<6VRC0*Y-|8!cxiM%Ku1hTLPK9NE;24P0Aq7sZe@30Zf|5|Uu<RoUrAI=Uvgz<X>)XCa#T%2Y;SI5RAFLlWdL7eb6;|0ZEtpEUuJS|ZC`X@a%W#`W&mStb6;|AbYXO5Uu1G$Y-|8yZF668Z**aFWnW}+Uu<RoUteQ*VP9rxZeeU`dSyUBM@&gVLtip3GA=a$UukY>bO2vtZF668Wo>VEWnX4;Z*5<6VRC0*Y-|8uV{LO^a%F9Ac4c2?a&K*4bYXI5Uu<Ro04{TRZFFH`04{TMa&%#004{TAb98caVPXI-Zf|sDE@y6aE@E|QY-BBIWB@K_ZgnnbVRL8zE@XLbb9rq5E@XLbb98b5E@y6aE_P*db7^mG04`^4buM;ga&u{KZeMZ$E^=jTVJ>8OZU8QFWo%(CaBOq{E@^IQbO0`JY;-PXZ*%}IbY*yS04`=}ZfO86a&Kf|bYTE4WoTb!a$#*{Uua}<04`-{UuJS)ZDjy1X>MtBUtw}`VR-;9W@&C|Utw}`VR-;9WMOn+E^=jTE^==GE@XLbVQpz+04`^5bS`jgbO0`7VRT^tE@E?Y04`&1ZEa<4bN~PV000000000000000000000000000000000000000000000000000000000000000000000000000000008vp<R2LJ#70ssI200000$N>NV00000$N>NV00000Bme*a0000000000000001ONa4000000000000000E&u=k_W%EH0ssI200000@Bsh-00000@Bsh-00000^aKC^000000{{R3000002mk;8000000000000000H~;_u3jhEB0ssI200000=mr1)00000=mr1)00000NDlx2000001ONa40RR912mk;8000007ytkO00000KmY&$0{{R30ssI200000Fcts+00000Fcts+0000090vdZ0000000000000000RR91000000000000000NB{r;|NsAQ0ssI200000OdS9K00000OdS9K00000Mgaf-000000{{R3000000ssI2000000ssI200000RR910{{R1P0ssI200000m>vKC00000m>vKC00000AOHXW000001ONa40RR912mk;8000000000000000WB>pF1ONa40ssI200000xE=ri00000xE=ri00000FdF~>000000{{R3000002mk;8000007ytkO00000ZU6uP1ONa4LI3~&00000=s5rY00000=s5rY000005DowU000000{{R3761SM2mk;8000007ytkO00000cmMzZ0RR911^@s600000_(uQ$00000_(uQ$000007XSbN0000000000000001ONa4000000000000000a{vGU0RR911^@s6000005J&(3000005J&(300000a0vha0000000000000005C8xG000005C8xG00000egFUf0RR911^@s600000fKdPd00000fKdPd000002mk;80000000000000002mk;8000002mk;800000hX4Qo0RR911^@s600000kWl~t00000kWl~t00000ML7Tf0000000000000005C8xG000000000000000jQ{`u0RR911^@s600000*opuE00000*opuE000002><{90000000000000001ONa4000000000000000lK=n!0RR91G5`Po00000;feqN00000;feqN00000*#rOp0000000000000000RR91000000RR9100000n*aa+0RR910ssI200000ypI3?00000ypI3?00000)CK?m0000000000000001ONa4000000000000000sQ>@~0RR910ssI200000kd^=d00000kd^=d000007#RQn0000000000000002mk;8000000000000000vj6}94gdfE0{{R3000005WOG(000005WN5Z000002mk;80000000000000002mk;8000002mk;800000zW@LL4*&oF0{{R3000007`-3>000007`*@h000002mk;80000000000000002mk;8000002mk;800000%K!iX0RR910{{R300000AiW>}00000AiV$p00000;1B=+000000000000000AOHXW000000000000000*Z=?k1^@s60{{R3000000L~x)000000L}ma00000zySaN000001ONa4000002mk;8000005C8xG00000f&c&j0RR910{{R300000z|SB600000z|Q~x00000FaQ7m0000000000000002mk;8000002mk;800000;Q#;t0RR910{{R3000000MH-+000000MGyc00000$OHfY0000000000000002mk;8000002mk;800000>Hq)$0RR910{{R300000;M5=h00000;M4#B0000000jU5000000000000000AOHXW000000000000000@Bjb+2mk;80{{R300000;MpJm00000;Mo8G000002mk;80000000000000000RR91000000000000000^#A|>0RR91FaQ7m000000000000000;Mo8G00000DF6Tf0000000000000000RR91000000RR91000000RR910ssI2000000000000000000005ZV9$00000SQ-ET000008vp<RcK`qY2mk;8000007ytkO000002><{90{{R300000000000000000000X!HO800000Fbe<x0000000000000000RR910000000000000005dZ)H0{{R300000000000000000000nEwC(00000{r~^~0000000000000000RR91000000000000000'
open('./_compprog_cffi.pypy36-pp73-x86_64-linux-gnu.so','wb').write(base64.b85decode(binary))

from _compprog_cffi import ffi, lib

hq_init_ll = lib.hq_init_ll
hq_get_size_ll = lib.hq_get_size_ll
hq_pop_ll = lib.hq_pop_ll
hq_top_ll = lib.hq_top_ll
hq_push_ll = lib.hq_push_ll

scan = lib.scanner_ll
prin = lib.printer_ll_one

# write your code here!

"""
This code was created from PyPy CFFI. (https://github.com/likein12/compprog-cffi-pypy-set)

```./lib/base.h

#include <assert.h>
#include <stdlib.h>

#ifndef Boolean
#define Boolean int
#endif

#ifndef TRUE
#define TRUE 1
#endif

#ifndef FALSE
#define FALSE 0
#endif

typedef long long ll;
typedef double lf;


```

```./lib/data_structures/cheapq/ll/instance.h

//ll=ll

typedef ll hq_data_t_ll;
#define HQ_CAP_DEFAULT 4

typedef struct {
    int cap;
    int n;
    hq_data_t_ll* q;
} cheapq_ll;

cheapq_ll* hq_init_ll(){
    cheapq_ll* hq = (cheapq_ll*)malloc(sizeof(cheapq_ll));
    hq->cap = HQ_CAP_DEFAULT;
    hq->n = 0;
    hq->q = (hq_data_t_ll*)malloc(hq->cap*sizeof(hq_data_t_ll));
    return hq;
}

int hq_get_size_ll(cheapq_ll* hq){
    return hq->n;
}

hq_data_t_ll* hq_extention_ll(cheapq_ll* hq){
    hq->cap *= 2;
    hq_data_t_ll* ptr = (hq_data_t_ll*)realloc(hq->q, (hq->cap)*sizeof(hq_data_t_ll));
    if (ptr==NULL) return NULL;
    hq->q = ptr;
    return hq->q;
}

hq_data_t_ll* hq_reduction_ll(cheapq_ll* hq){
    hq->cap /= 4;
    hq_data_t_ll* ptr = (hq_data_t_ll*)realloc(hq->q, (hq->cap)*sizeof(hq_data_t_ll));
    if (ptr==NULL) return NULL;
    hq->q = ptr;
    return hq->q;
}

hq_data_t_ll hq_pop_ll(cheapq_ll* hq){
    if ((hq->n)-1<=(hq->cap)/16 && (hq->n)>HQ_CAP_DEFAULT) hq_reduction_ll(hq);
    hq_data_t_ll* q = hq->q;
    int res = q[0];
    q[0] = q[hq->n-1]; 
    (hq->n)--;
    int n = hq->n;
    int now = 0;
    hq_data_t_ll tmp;
    int ch;
    while (2*now+1<=n-1){
        if (2*now+2<=n-1) {
            if (q[2*now+1]<q[2*now+2]) ch = 2*now+1;
            else ch = 2*now+2;
        } else {
            ch = 2*now+1;
        }
        if (q[now] > q[ch]) {
            tmp = q[now];
            q[now] = q[ch];
            q[ch] = tmp;
            now = ch;
        } else {
            break;
        }             
    }        
    return res;
}

hq_data_t_ll hq_top_ll(cheapq_ll* hq){
    return hq->q[0];
}

void hq_push_ll(cheapq_ll* hq, hq_data_t_ll x){
    (hq->n)++;
    if ((hq->n)>(hq->cap)) hq_extention_ll(hq);
    hq_data_t_ll* q = hq->q;
    int now = hq->n-1;
    q[now] = x;
    hq_data_t_ll tmp;
    int par;
    while (now>0) {
        par = (now-1)/2;
        if (q[par] > q[now]) {
            tmp = q[now];
            q[now] = q[par];
            q[par] = tmp;
            now = par;
        } else {
            break;
        }       
    }
}

```

```./lib/data_structures/cheapq/lf/instance.h

//lf=lf

typedef lf hq_data_t_lf;
#define HQ_CAP_DEFAULT 4

typedef struct {
    int cap;
    int n;
    hq_data_t_lf* q;
} cheapq_lf;

cheapq_lf* hq_init_lf(){
    cheapq_lf* hq = (cheapq_lf*)malloc(sizeof(cheapq_lf));
    hq->cap = HQ_CAP_DEFAULT;
    hq->n = 0;
    hq->q = (hq_data_t_lf*)malloc(hq->cap*sizeof(hq_data_t_lf));
    return hq;
}

int hq_get_size_lf(cheapq_lf* hq){
    return hq->n;
}

hq_data_t_lf* hq_extention_lf(cheapq_lf* hq){
    hq->cap *= 2;
    hq_data_t_lf* ptr = (hq_data_t_lf*)realloc(hq->q, (hq->cap)*sizeof(hq_data_t_lf));
    if (ptr==NULL) return NULL;
    hq->q = ptr;
    return hq->q;
}

hq_data_t_lf* hq_reduction_lf(cheapq_lf* hq){
    hq->cap /= 4;
    hq_data_t_lf* ptr = (hq_data_t_lf*)realloc(hq->q, (hq->cap)*sizeof(hq_data_t_lf));
    if (ptr==NULL) return NULL;
    hq->q = ptr;
    return hq->q;
}

hq_data_t_lf hq_pop_lf(cheapq_lf* hq){
    if ((hq->n)-1<=(hq->cap)/16 && (hq->n)>HQ_CAP_DEFAULT) hq_reduction_lf(hq);
    hq_data_t_lf* q = hq->q;
    int res = q[0];
    q[0] = q[hq->n-1]; 
    (hq->n)--;
    int n = hq->n;
    int now = 0;
    hq_data_t_lf tmp;
    int ch;
    while (2*now+1<=n-1){
        if (2*now+2<=n-1) {
            if (q[2*now+1]<q[2*now+2]) ch = 2*now+1;
            else ch = 2*now+2;
        } else {
            ch = 2*now+1;
        }
        if (q[now] > q[ch]) {
            tmp = q[now];
            q[now] = q[ch];
            q[ch] = tmp;
            now = ch;
        } else {
            break;
        }             
    }        
    return res;
}

hq_data_t_lf hq_top_lf(cheapq_lf* hq){
    return hq->q[0];
}

void hq_push_lf(cheapq_lf* hq, hq_data_t_lf x){
    (hq->n)++;
    if ((hq->n)>(hq->cap)) hq_extention_lf(hq);
    hq_data_t_lf* q = hq->q;
    int now = hq->n-1;
    q[now] = x;
    hq_data_t_lf tmp;
    int par;
    while (now>0) {
        par = (now-1)/2;
        if (q[par] > q[now]) {
            tmp = q[now];
            q[now] = q[par];
            q[par] = tmp;
            now = par;
        } else {
            break;
        }       
    }
}

```

```./lib/data_structures/coset/ll/instance.h

//ll=ll

typedef ll cs_data_t_ll;

// AVL tree
typedef struct cs_node_ll {
    cs_data_t_ll key;
    struct cs_node_ll* left;
    struct cs_node_ll* right;
    int rank;
    int size;
    int isR;    // L: -1, E: 0, R: 1
} cs_node_ll;

cs_node_ll* cs_new_node_ll(cs_data_t_ll key){
    cs_node_ll* nd = (cs_node_ll*)malloc(sizeof(cs_node_ll));
    nd->key = key;
    nd->left = NULL;
    nd->right = NULL;
    nd->rank = 0;
    nd->size = 1;
    nd->isR = 0;
    return nd;
}

void cs_node_update_ll(cs_node_ll* nd){
    cs_node_ll* left = nd->left;
    cs_node_ll* right = nd->right;
    int lr, rr, ls, rs;
    if (left==NULL){
        lr = -1;
        ls = 0;
    } else {
        lr = left->rank;
        ls = left->size;
    }
    if (right==NULL){
        rr = -1;
        rs = 0;
    } else {
        rr = right->rank;
        rs = right->size;
    }
    nd->rank = 1+((lr>rr)?lr:rr);
    nd->size = ls+rs+1;
    nd->isR = rr-lr;
}

typedef struct {
    cs_node_ll* root;
    int size;
} coset_ll;

coset_ll* coset_init_ll(){
    coset_ll* cs = (coset_ll*)malloc(sizeof(coset_ll));
    cs->root = NULL;
    cs->size = 0;
    return cs;
}

void _cs_clear_ll(cs_node_ll* nd){
    if (nd->left!=NULL) _cs_clear_ll(nd->left);
    if (nd->right!=NULL) _cs_clear_ll(nd->right);
    free(nd);
    return;
}

void cs_clear_ll(coset_ll* cs){
    if (cs->root==NULL) return;
    _cs_clear_ll(cs->root);
    cs->root = NULL;
    cs->size = 0;
}

int cs_get_size_ll(coset_ll* cs){
    return cs->size;
}

cs_node_ll* _cs_max_ll(cs_node_ll* nd){
    if (nd->right==NULL) return nd;
    return _cs_max_ll(nd->right);
}

cs_node_ll* cs_max_ll(coset_ll* cs){
    if (cs->root==NULL) return NULL;
    return _cs_max_ll(cs->root);
}

cs_node_ll* _cs_min_ll(cs_node_ll* nd){
    if (nd->left==NULL) return nd;
    return _cs_min_ll(nd->left);
}

cs_node_ll* cs_min_ll(coset_ll* cs){
    if (cs->root==NULL) return NULL;
    return _cs_min_ll(cs->root);
}

cs_node_ll* _cs_lower_bound_ll(cs_node_ll* nd, cs_data_t_ll k){
	if (nd==NULL) return NULL;
	if (nd->key < k) return _cs_lower_bound_ll(nd->right, k);
	return _cs_lower_bound_ll(nd->left, k)?:nd;
}

cs_node_ll* cs_lower_bound_ll(coset_ll* cs, cs_data_t_ll k){
    return _cs_lower_bound_ll(cs->root, k);
}

cs_node_ll* _cs_rlower_bound_ll(cs_node_ll* nd, cs_data_t_ll k){
	if (nd==NULL) return NULL;
	if (nd->key > k) return _cs_rlower_bound_ll(nd->left, k);
	return _cs_rlower_bound_ll(nd->right, k)?:nd;
}

cs_node_ll* cs_rlower_bound_ll(coset_ll* cs, cs_data_t_ll k){
    return _cs_rlower_bound_ll(cs->root, k);
}

cs_node_ll* _cs_upper_bound_ll(cs_node_ll* nd, cs_data_t_ll k){
	if(nd==NULL) return NULL;
	if(nd->key <= k) return _cs_upper_bound_ll(nd->right, k);
	return _cs_upper_bound_ll(nd->left, k)?:nd;
}

cs_node_ll* cs_upper_bound_ll(coset_ll* cs, cs_data_t_ll k){
    return _cs_upper_bound_ll(cs->root, k);
}

cs_node_ll* _cs_rupper_bound_ll(cs_node_ll* nd, cs_data_t_ll k){
	if(nd==NULL) return NULL;
	if(nd->key >= k) return _cs_rupper_bound_ll(nd->left, k);
	return _cs_rupper_bound_ll(nd->right, k)?:nd;
}

cs_node_ll* cs_rupper_bound_ll(coset_ll* cs, cs_data_t_ll k){
    return _cs_rupper_bound_ll(cs->root, k);
}

cs_node_ll* _cs_find_ll(cs_node_ll* nd, cs_data_t_ll k){
    if(nd==NULL) return NULL;
    if(nd->key==k) return nd;
    if(nd->key<k) return _cs_find_ll(nd->right, k);
    if(nd->key>k) return _cs_find_ll(nd->left, k);
}

cs_node_ll* cs_find_ll(coset_ll* cs, cs_data_t_ll k){
    return _cs_find_ll(cs->root, k);
}

cs_node_ll* cs_rotate_sl_ll(cs_node_ll* nd, cs_node_ll* ch){
    cs_node_ll* beta = ch->left;
    ch->left = nd;
    nd->right = beta;
    cs_node_update_ll(nd);
    cs_node_update_ll(ch);
    return ch;
}

cs_node_ll* cs_rotate_dr_ll(cs_node_ll* nd, cs_node_ll* ch){
    cs_node_ll *chch, *beta, *gamma;
    chch = ch->left;
    beta = chch->left;
    gamma = chch->right;
    chch->left = nd;
    chch->right = ch;
    nd->right = beta;
    ch->left = gamma;
    cs_node_update_ll(nd);
    cs_node_update_ll(ch);
    cs_node_update_ll(chch);
    return chch;
}

cs_node_ll* cs_rotate_sr_ll(cs_node_ll* nd, cs_node_ll* ch){
    cs_node_ll* beta = ch->right;
    ch->right = nd;
    nd->left = beta;
    cs_node_update_ll(nd);
    cs_node_update_ll(ch);
    return ch;
}

cs_node_ll* cs_rotate_dl_ll(cs_node_ll* nd, cs_node_ll* ch){
    cs_node_ll *chch, *beta, *gamma;
    chch = ch->right;
    beta = chch->right;
    gamma = chch->left;
    chch->right = nd;
    chch->left = ch;
    nd->left = beta;
    ch->right = gamma;
    cs_node_update_ll(nd);
    cs_node_update_ll(ch);
    cs_node_update_ll(chch);
    return chch;
}

cs_node_ll* _cs_insert_ll(cs_node_ll* nd, cs_data_t_ll k){
    if(nd->key==k) return NULL;
    cs_node_ll* ch;
    if(nd->key<k) {
        if (nd->right==NULL) {
            ch = cs_new_node_ll(k); 
            nd->right = ch;
        } else {
            ch = _cs_insert_ll(nd->right, k);
            if (ch==NULL) return NULL;
            nd->right = ch;
        }
        ++(nd->size);
        if (nd->rank==ch->rank+2) return nd;
        if (nd->rank==ch->rank+1) {
            if (nd->isR==-1) nd->isR = 0;
            return nd; 
        }
        if (nd->rank==ch->rank && nd->isR==0) {
            ++(nd->rank);
            nd->isR = 1;
            return nd;
        }
        ++(nd->rank);
        if (ch->isR==1) return cs_rotate_sl_ll(nd, ch);
        if (ch->isR==-1) return cs_rotate_dr_ll(nd, ch);
    }
    else {
        if (nd->left==NULL) {
            ch = cs_new_node_ll(k); 
            nd->left = ch;
        } else {
            ch = _cs_insert_ll(nd->left, k);
            if (ch==NULL) return NULL;
            nd->left = ch;
        }
        ++(nd->size);
        if (nd->rank==ch->rank+2) return nd;
        if (nd->rank==ch->rank+1) {
            if (nd->isR==1) nd->isR = 0;
            return nd;
        } 
        if (nd->rank==ch->rank && nd->isR==0) {
            ++(nd->rank);
            nd->isR = -1;
            return nd;
        }
        ++(nd->rank);
        if (ch->isR==-1) return cs_rotate_sr_ll(nd, ch);
        if (ch->isR==1) return cs_rotate_dl_ll(nd, ch);
    }
    exit(1);
    return NULL;
}

void cs_insert_ll(coset_ll* cs, cs_data_t_ll k){
    if (cs->root==NULL){
        cs->root = cs_new_node_ll(k);
        cs->size = (cs->root)->size;
        return;
    }
    cs_node_ll* ptr = _cs_insert_ll(cs->root, k);
    if (ptr!=NULL) cs->root = ptr;
    cs->size = (cs->root)->size;
}

//これから
//削除したnodeの子が一つ→それをそのまま上げる
//二つ→左側の子孫の最大値を持ってくる
cs_node_ll* _cs_remove_max_ll(cs_node_ll* nd, cs_node_ll* targ){
    if (nd->right==NULL) {
        targ->key = nd->key;
        cs_node_ll* ch = nd->left;
        free(nd);
        return ch;
    }
    cs_node_ll *ch, *cha; 
    ch = _cs_remove_max_ll(nd->right, targ);
    nd->right = ch;
    
    cs_node_update_ll(nd);
    if (nd->isR==-2) {
        cha = nd->left;
        if (cha->isR<=0) return cs_rotate_sr_ll(nd, cha);
        if (cha->isR==1) return cs_rotate_dl_ll(nd, cha);
    }
    return nd;
}

cs_node_ll* _cs_remove_from_targ_ll(cs_node_ll* nd){
    cs_node_ll* left = nd->left;
    cs_node_ll* right = nd->right;
    if (left==NULL && right==NULL) {
        free(nd);
        return NULL;
    }
    if (left!=NULL && right!=NULL) {
        cs_node_ll* ch = _cs_remove_max_ll(left, nd);
        nd->left = ch;
        cs_node_update_ll(nd);
        if (nd->isR==2) {
            cs_node_ll* cha = nd->right;
            if (cha->isR>=0) return cs_rotate_sl_ll(nd, cha);
            if (cha->isR==-1) return cs_rotate_dr_ll(nd, cha);
        }
        return nd;
        
    }
    free(nd);
    if (left!=NULL) return left;
    else return right;
}


cs_node_ll* _cs_remove_ll(cs_node_ll* nd, cs_data_t_ll k){
    if(nd->key==k) return _cs_remove_from_targ_ll(nd);
    cs_node_ll *ch, *cha;
    if(nd->key<k) {
        if (nd->right==NULL) {
            return nd;
        } else {
            ch = _cs_remove_ll(nd->right, k);
            nd->right = ch;
        }
        cs_node_update_ll(nd);
        if (nd->isR==-2) {
            cha = nd->left;
            if (cha->isR<=0) return cs_rotate_sr_ll(nd, cha);
            if (cha->isR==1) return cs_rotate_dl_ll(nd, cha);
        }
        return nd;
    }
    else {
        if (nd->left==NULL) {
            return nd;
        } else {
            ch = _cs_remove_ll(nd->left, k);
            nd->left = ch;
        }
        cs_node_update_ll(nd);
        if (nd->isR==2) {
            cha = nd->right;
            if (cha->isR>=0) return cs_rotate_sl_ll(nd, cha);
            if (cha->isR==-1) return cs_rotate_dr_ll(nd, cha);
        }
        return nd;
    }
}

void cs_remove_ll(coset_ll* cs, cs_data_t_ll k){
    cs->root = _cs_remove_ll(cs->root, k);
    if (cs->root==NULL) cs->size = 0;
    else cs->size = (cs->root)->size;
}

cs_node_ll* _cs_get_k_ll(cs_node_ll* nd, int k, int l){
    int ls;
    if (nd->left!=NULL) ls = (nd->left)->size;
    else ls = 0;
    if (l+ls+1==k) return nd;
    if (l+ls+1>k) return _cs_get_k_ll(nd->left, k, l);
    if (l+ls+1<k) return _cs_get_k_ll(nd->right, k, l+ls+1);
}

cs_node_ll* cs_get_k_ll(coset_ll* cs, int k){
    //assert (cs->root!=NULL);
    //assert ((cs->root)->size>k);
    return _cs_get_k_ll(cs->root, k+1, 0);
}

```

```./lib/data_structures/coset/lf/instance.h

//lf=ll

typedef lf cs_data_t_lf;

// AVL tree
typedef struct cs_node_lf {
    cs_data_t_lf key;
    struct cs_node_lf* left;
    struct cs_node_lf* right;
    int rank;
    int size;
    int isR;    // L: -1, E: 0, R: 1
} cs_node_lf;

cs_node_lf* cs_new_node_lf(cs_data_t_lf key){
    cs_node_lf* nd = (cs_node_lf*)malloc(sizeof(cs_node_lf));
    nd->key = key;
    nd->left = NULL;
    nd->right = NULL;
    nd->rank = 0;
    nd->size = 1;
    nd->isR = 0;
    return nd;
}

void cs_node_update_lf(cs_node_lf* nd){
    cs_node_lf* left = nd->left;
    cs_node_lf* right = nd->right;
    int lr, rr, ls, rs;
    if (left==NULL){
        lr = -1;
        ls = 0;
    } else {
        lr = left->rank;
        ls = left->size;
    }
    if (right==NULL){
        rr = -1;
        rs = 0;
    } else {
        rr = right->rank;
        rs = right->size;
    }
    nd->rank = 1+((lr>rr)?lr:rr);
    nd->size = ls+rs+1;
    nd->isR = rr-lr;
}

typedef struct {
    cs_node_lf* root;
    int size;
} coset_lf;

coset_lf* coset_init_lf(){
    coset_lf* cs = (coset_lf*)malloc(sizeof(coset_lf));
    cs->root = NULL;
    cs->size = 0;
    return cs;
}

void _cs_clear_lf(cs_node_lf* nd){
    if (nd->left!=NULL) _cs_clear_lf(nd->left);
    if (nd->right!=NULL) _cs_clear_lf(nd->right);
    free(nd);
    return;
}

void cs_clear_lf(coset_lf* cs){
    if (cs->root==NULL) return;
    _cs_clear_lf(cs->root);
    cs->root = NULL;
    cs->size = 0;
}

int cs_get_size_lf(coset_lf* cs){
    return cs->size;
}

cs_node_lf* _cs_max_lf(cs_node_lf* nd){
    if (nd->right==NULL) return nd;
    return _cs_max_lf(nd->right);
}

cs_node_lf* cs_max_lf(coset_lf* cs){
    if (cs->root==NULL) return NULL;
    return _cs_max_lf(cs->root);
}

cs_node_lf* _cs_min_lf(cs_node_lf* nd){
    if (nd->left==NULL) return nd;
    return _cs_min_lf(nd->left);
}

cs_node_lf* cs_min_lf(coset_lf* cs){
    if (cs->root==NULL) return NULL;
    return _cs_min_lf(cs->root);
}

cs_node_lf* _cs_lower_bound_lf(cs_node_lf* nd, cs_data_t_lf k){
	if (nd==NULL) return NULL;
	if (nd->key < k) return _cs_lower_bound_lf(nd->right, k);
	return _cs_lower_bound_lf(nd->left, k)?:nd;
}

cs_node_lf* cs_lower_bound_lf(coset_lf* cs, cs_data_t_lf k){
    return _cs_lower_bound_lf(cs->root, k);
}

cs_node_lf* _cs_rlower_bound_lf(cs_node_lf* nd, cs_data_t_lf k){
	if (nd==NULL) return NULL;
	if (nd->key > k) return _cs_rlower_bound_lf(nd->left, k);
	return _cs_rlower_bound_lf(nd->right, k)?:nd;
}

cs_node_lf* cs_rlower_bound_lf(coset_lf* cs, cs_data_t_lf k){
    return _cs_rlower_bound_lf(cs->root, k);
}

cs_node_lf* _cs_upper_bound_lf(cs_node_lf* nd, cs_data_t_lf k){
	if(nd==NULL) return NULL;
	if(nd->key <= k) return _cs_upper_bound_lf(nd->right, k);
	return _cs_upper_bound_lf(nd->left, k)?:nd;
}

cs_node_lf* cs_upper_bound_lf(coset_lf* cs, cs_data_t_lf k){
    return _cs_upper_bound_lf(cs->root, k);
}

cs_node_lf* _cs_rupper_bound_lf(cs_node_lf* nd, cs_data_t_lf k){
	if(nd==NULL) return NULL;
	if(nd->key >= k) return _cs_rupper_bound_lf(nd->left, k);
	return _cs_rupper_bound_lf(nd->right, k)?:nd;
}

cs_node_lf* cs_rupper_bound_lf(coset_lf* cs, cs_data_t_lf k){
    return _cs_rupper_bound_lf(cs->root, k);
}

cs_node_lf* _cs_find_lf(cs_node_lf* nd, cs_data_t_lf k){
    if(nd==NULL) return NULL;
    if(nd->key==k) return nd;
    if(nd->key<k) return _cs_find_lf(nd->right, k);
    if(nd->key>k) return _cs_find_lf(nd->left, k);
}

cs_node_lf* cs_find_lf(coset_lf* cs, cs_data_t_lf k){
    return _cs_find_lf(cs->root, k);
}

cs_node_lf* cs_rotate_sl_lf(cs_node_lf* nd, cs_node_lf* ch){
    cs_node_lf* beta = ch->left;
    ch->left = nd;
    nd->right = beta;
    cs_node_update_lf(nd);
    cs_node_update_lf(ch);
    return ch;
}

cs_node_lf* cs_rotate_dr_lf(cs_node_lf* nd, cs_node_lf* ch){
    cs_node_lf *chch, *beta, *gamma;
    chch = ch->left;
    beta = chch->left;
    gamma = chch->right;
    chch->left = nd;
    chch->right = ch;
    nd->right = beta;
    ch->left = gamma;
    cs_node_update_lf(nd);
    cs_node_update_lf(ch);
    cs_node_update_lf(chch);
    return chch;
}

cs_node_lf* cs_rotate_sr_lf(cs_node_lf* nd, cs_node_lf* ch){
    cs_node_lf* beta = ch->right;
    ch->right = nd;
    nd->left = beta;
    cs_node_update_lf(nd);
    cs_node_update_lf(ch);
    return ch;
}

cs_node_lf* cs_rotate_dl_lf(cs_node_lf* nd, cs_node_lf* ch){
    cs_node_lf *chch, *beta, *gamma;
    chch = ch->right;
    beta = chch->right;
    gamma = chch->left;
    chch->right = nd;
    chch->left = ch;
    nd->left = beta;
    ch->right = gamma;
    cs_node_update_lf(nd);
    cs_node_update_lf(ch);
    cs_node_update_lf(chch);
    return chch;
}

cs_node_lf* _cs_insert_lf(cs_node_lf* nd, cs_data_t_lf k){
    if(nd->key==k) return NULL;
    cs_node_lf* ch;
    if(nd->key<k) {
        if (nd->right==NULL) {
            ch = cs_new_node_lf(k); 
            nd->right = ch;
        } else {
            ch = _cs_insert_lf(nd->right, k);
            if (ch==NULL) return NULL;
            nd->right = ch;
        }
        ++(nd->size);
        if (nd->rank==ch->rank+2) return nd;
        if (nd->rank==ch->rank+1) {
            if (nd->isR==-1) nd->isR = 0;
            return nd; 
        }
        if (nd->rank==ch->rank && nd->isR==0) {
            ++(nd->rank);
            nd->isR = 1;
            return nd;
        }
        ++(nd->rank);
        if (ch->isR==1) return cs_rotate_sl_lf(nd, ch);
        if (ch->isR==-1) return cs_rotate_dr_lf(nd, ch);
    }
    else {
        if (nd->left==NULL) {
            ch = cs_new_node_lf(k); 
            nd->left = ch;
        } else {
            ch = _cs_insert_lf(nd->left, k);
            if (ch==NULL) return NULL;
            nd->left = ch;
        }
        ++(nd->size);
        if (nd->rank==ch->rank+2) return nd;
        if (nd->rank==ch->rank+1) {
            if (nd->isR==1) nd->isR = 0;
            return nd;
        } 
        if (nd->rank==ch->rank && nd->isR==0) {
            ++(nd->rank);
            nd->isR = -1;
            return nd;
        }
        ++(nd->rank);
        if (ch->isR==-1) return cs_rotate_sr_lf(nd, ch);
        if (ch->isR==1) return cs_rotate_dl_lf(nd, ch);
    }
    exit(1);
    return NULL;
}

void cs_insert_lf(coset_lf* cs, cs_data_t_lf k){
    if (cs->root==NULL){
        cs->root = cs_new_node_lf(k);
        cs->size = (cs->root)->size;
        return;
    }
    cs_node_lf* ptr = _cs_insert_lf(cs->root, k);
    if (ptr!=NULL) cs->root = ptr;
    cs->size = (cs->root)->size;
}

//これから
//削除したnodeの子が一つ→それをそのまま上げる
//二つ→左側の子孫の最大値を持ってくる
cs_node_lf* _cs_remove_max_lf(cs_node_lf* nd, cs_node_lf* targ){
    if (nd->right==NULL) {
        targ->key = nd->key;
        cs_node_lf* ch = nd->left;
        free(nd);
        return ch;
    }
    cs_node_lf *ch, *cha; 
    ch = _cs_remove_max_lf(nd->right, targ);
    nd->right = ch;
    
    cs_node_update_lf(nd);
    if (nd->isR==-2) {
        cha = nd->left;
        if (cha->isR<=0) return cs_rotate_sr_lf(nd, cha);
        if (cha->isR==1) return cs_rotate_dl_lf(nd, cha);
    }
    return nd;
}

cs_node_lf* _cs_remove_from_targ_lf(cs_node_lf* nd){
    cs_node_lf* left = nd->left;
    cs_node_lf* right = nd->right;
    if (left==NULL && right==NULL) {
        free(nd);
        return NULL;
    }
    if (left!=NULL && right!=NULL) {
        cs_node_lf* ch = _cs_remove_max_lf(left, nd);
        nd->left = ch;
        cs_node_update_lf(nd);
        if (nd->isR==2) {
            cs_node_lf* cha = nd->right;
            if (cha->isR>=0) return cs_rotate_sl_lf(nd, cha);
            if (cha->isR==-1) return cs_rotate_dr_lf(nd, cha);
        }
        return nd;
        
    }
    free(nd);
    if (left!=NULL) return left;
    else return right;
}


cs_node_lf* _cs_remove_lf(cs_node_lf* nd, cs_data_t_lf k){
    if(nd->key==k) return _cs_remove_from_targ_lf(nd);
    cs_node_lf *ch, *cha;
    if(nd->key<k) {
        if (nd->right==NULL) {
            return nd;
        } else {
            ch = _cs_remove_lf(nd->right, k);
            nd->right = ch;
        }
        cs_node_update_lf(nd);
        if (nd->isR==-2) {
            cha = nd->left;
            if (cha->isR<=0) return cs_rotate_sr_lf(nd, cha);
            if (cha->isR==1) return cs_rotate_dl_lf(nd, cha);
        }
        return nd;
    }
    else {
        if (nd->left==NULL) {
            return nd;
        } else {
            ch = _cs_remove_lf(nd->left, k);
            nd->left = ch;
        }
        cs_node_update_lf(nd);
        if (nd->isR==2) {
            cha = nd->right;
            if (cha->isR>=0) return cs_rotate_sl_lf(nd, cha);
            if (cha->isR==-1) return cs_rotate_dr_lf(nd, cha);
        }
        return nd;
    }
}

void cs_remove_lf(coset_lf* cs, cs_data_t_lf k){
    cs->root = _cs_remove_lf(cs->root, k);
    if (cs->root==NULL) cs->size = 0;
    else cs->size = (cs->root)->size;
}

cs_node_lf* _cs_get_k_lf(cs_node_lf* nd, int k, int l){
    int ls;
    if (nd->left!=NULL) ls = (nd->left)->size;
    else ls = 0;
    if (l+ls+1==k) return nd;
    if (l+ls+1>k) return _cs_get_k_lf(nd->left, k, l);
    if (l+ls+1<k) return _cs_get_k_lf(nd->right, k, l+ls+1);
}

cs_node_lf* cs_get_k_lf(coset_lf* cs, int k){
    //assert (cs->root!=NULL);
    //assert ((cs->root)->size>k);
    return _cs_get_k_lf(cs->root, k+1, 0);
}

```

```./lib/data_structures/comultiset/ll/instance.h

//ll=ll

typedef ll cms_data_t_ll;

// AVL tree
typedef struct cms_node_ll {
    cms_data_t_ll key;
    int count;
    struct cms_node_ll* left;
    struct cms_node_ll* right;
    int rank;
    int size;
    int isR;    // L: -1, E: 0, R: 1
} cms_node_ll;

cms_node_ll* cms_new_node_ll(cms_data_t_ll key, int count){
    cms_node_ll* nd = (cms_node_ll*)malloc(sizeof(cms_node_ll));
    nd->key = key;
    nd->count = count;
    nd->left = NULL;
    nd->right = NULL;
    nd->rank = 0;
    nd->size = count;
    nd->isR = 0;
    return nd;
}

void cms_node_update_ll(cms_node_ll* nd){
    cms_node_ll* left = nd->left;
    cms_node_ll* right = nd->right;
    int lr, rr, ls, rs;
    if (left==NULL){
        lr = -1;
        ls = 0;
    } else {
        lr = left->rank;
        ls = left->size;
    }
    if (right==NULL){
        rr = -1;
        rs = 0;
    } else {
        rr = right->rank;
        rs = right->size;
    }
    nd->rank = 1+((lr>rr)?lr:rr);
    nd->size = ls+rs+nd->count;
    nd->isR = rr-lr;
}

typedef struct {
    cms_node_ll* root;
    int size;
} comultiset_ll;

comultiset_ll* comultiset_init_ll(){
    comultiset_ll* cms = (comultiset_ll*)malloc(sizeof(comultiset_ll));
    cms->root = NULL;
    cms->size = 0;
    return cms;
}

void _cms_clear_ll(cms_node_ll* nd){
    if (nd->left!=NULL) _cms_clear_ll(nd->left);
    if (nd->right!=NULL) _cms_clear_ll(nd->right);
    free(nd);
    return;
}

void cms_clear_ll(comultiset_ll* cms){
    if (cms->root==NULL) return;
    _cms_clear_ll(cms->root);
    cms->root = NULL;
    cms->size = 0;
}

int cms_get_size_ll(comultiset_ll* cms){
    return cms->size;
}

cms_node_ll* _cms_max_ll(cms_node_ll* nd){
    if (nd->right==NULL) return nd;
    return _cms_max_ll(nd->right);
}

cms_node_ll* cms_max_ll(comultiset_ll* cms){
    if (cms->root==NULL) return NULL;
    return _cms_max_ll(cms->root);
}

cms_node_ll* _cms_min_ll(cms_node_ll* nd){
    if (nd->left==NULL) return nd;
    return _cms_min_ll(nd->left);
}

cms_node_ll* cms_min_ll(comultiset_ll* cms){
    if (cms->root==NULL) return NULL;
    return _cms_min_ll(cms->root);
}

cms_node_ll* _cms_lower_bound_ll(cms_node_ll* nd, cms_data_t_ll k){
	if (nd==NULL) return NULL;
	if (nd->key < k) return _cms_lower_bound_ll(nd->right, k);
	return _cms_lower_bound_ll(nd->left, k)?:nd;
}

cms_node_ll* cms_lower_bound_ll(comultiset_ll* cms, cms_data_t_ll k){
    return _cms_lower_bound_ll(cms->root, k);
}

cms_node_ll* _cms_rlower_bound_ll(cms_node_ll* nd, cms_data_t_ll k){
	if (nd==NULL) return NULL;
	if (nd->key > k) return _cms_rlower_bound_ll(nd->left, k);
	return _cms_rlower_bound_ll(nd->right, k)?:nd;
}

cms_node_ll* cms_rlower_bound_ll(comultiset_ll* cms, cms_data_t_ll k){
    return _cms_rlower_bound_ll(cms->root, k);
}

cms_node_ll* _cms_upper_bound_ll(cms_node_ll* nd, cms_data_t_ll k){
	if(nd==NULL) return NULL;
	if(nd->key <= k) return _cms_upper_bound_ll(nd->right, k);
	return _cms_upper_bound_ll(nd->left, k)?:nd;
}

cms_node_ll* cms_upper_bound_ll(comultiset_ll* cms, cms_data_t_ll k){
    return _cms_upper_bound_ll(cms->root, k);
}

cms_node_ll* _cms_rupper_bound_ll(cms_node_ll* nd, cms_data_t_ll k){
	if(nd==NULL) return NULL;
	if(nd->key >= k) return _cms_rupper_bound_ll(nd->left, k);
	return _cms_rupper_bound_ll(nd->right, k)?:nd;
}

cms_node_ll* cms_rupper_bound_ll(comultiset_ll* cms, cms_data_t_ll k){
    return _cms_rupper_bound_ll(cms->root, k);
}

cms_node_ll* _cms_find_ll(cms_node_ll* nd, cms_data_t_ll k){
    if(nd==NULL) return NULL;
    if(nd->key==k) return nd;
    if(nd->key<k) return _cms_find_ll(nd->right, k);
    if(nd->key>k) return _cms_find_ll(nd->left, k);
}

cms_node_ll* cms_find_ll(comultiset_ll* cms, cms_data_t_ll k){
    return _cms_find_ll(cms->root, k);
}

int cms_count_ll(cms_node_ll* cms, cms_data_t_ll k){
    cms_node_ll* nd = _cms_find_ll(cms, k);
    if (nd==NULL) return 0;
    return nd->count;
}

cms_node_ll* cms_rotate_sl_ll(cms_node_ll* nd, cms_node_ll* ch){
    cms_node_ll* beta = ch->left;
    ch->left = nd;
    nd->right = beta;
    cms_node_update_ll(nd);
    cms_node_update_ll(ch);
    return ch;
}

cms_node_ll* cms_rotate_dr_ll(cms_node_ll* nd, cms_node_ll* ch){
    cms_node_ll *chch, *beta, *gamma;
    chch = ch->left;
    beta = chch->left;
    gamma = chch->right;
    chch->left = nd;
    chch->right = ch;
    nd->right = beta;
    ch->left = gamma;
    cms_node_update_ll(nd);
    cms_node_update_ll(ch);
    cms_node_update_ll(chch);
    return chch;
}

cms_node_ll* cms_rotate_sr_ll(cms_node_ll* nd, cms_node_ll* ch){
    cms_node_ll* beta = ch->right;
    ch->right = nd;
    nd->left = beta;
    cms_node_update_ll(nd);
    cms_node_update_ll(ch);
    return ch;
}

cms_node_ll* cms_rotate_dl_ll(cms_node_ll* nd, cms_node_ll* ch){
    cms_node_ll *chch, *beta, *gamma;
    chch = ch->right;
    beta = chch->right;
    gamma = chch->left;
    chch->right = nd;
    chch->left = ch;
    nd->left = beta;
    ch->right = gamma;
    cms_node_update_ll(nd);
    cms_node_update_ll(ch);
    cms_node_update_ll(chch);
    return chch;
}

cms_node_ll* _cms_insert_ll(cms_node_ll* nd, cms_data_t_ll k, int count){
    if(nd->key==k) {
        (nd->count) += count;
        nd->size += count;
        return nd;
    }
    cms_node_ll* ch;
    if(nd->key<k) {
        if (nd->right==NULL) {
            ch = cms_new_node_ll(k, count); 
            nd->right = ch;
        } else {
            ch = _cms_insert_ll(nd->right, k, count);
            nd->right = ch;
        }
        cms_node_update_ll(nd);
        if (nd->isR==2) {
            if (ch->isR==1) return cms_rotate_sl_ll(nd, ch);
            if (ch->isR==-1) return cms_rotate_dr_ll(nd, ch);
        }
        return nd;
    }
    else {
        if (nd->left==NULL) {
            ch = cms_new_node_ll(k, count); 
            nd->left = ch;
        } else {
            ch = _cms_insert_ll(nd->left, k, count);
            nd->left = ch;
        }
        cms_node_update_ll(nd);
        if (nd->isR==-2) {
            if (ch->isR==-1) return cms_rotate_sr_ll(nd, ch);
            if (ch->isR==1) return cms_rotate_dl_ll(nd, ch);
        }
        return nd;
    }
    exit(1);
    return NULL;
}

void cms_insert_ll(comultiset_ll* cms, cms_data_t_ll k, int count){
    if (cms->root==NULL){
        cms->root = cms_new_node_ll(k, count);
        cms->size = (cms->root)->size;
        return;
    }
    cms_node_ll* ptr = _cms_insert_ll(cms->root, k, count);
    if (ptr!=NULL) cms->root = ptr;
    cms->size = (cms->root)->size;
}

//これから
//削除したnodeの子が一つ→それをそのまま上げる
//二つ→左側の子孫の最大値を持ってくる
cms_node_ll* _cms_remove_max_ll(cms_node_ll* nd, cms_node_ll* targ){
    if (nd->right==NULL) {
        targ->key = nd->key;
        targ->count = nd->count;
        cms_node_ll* ch = nd->left;
        free(nd);
        return ch;
    }
    cms_node_ll *ch, *cha; 
    ch = _cms_remove_max_ll(nd->right, targ);
    nd->right = ch;
    
    cms_node_update_ll(nd);
    if (nd->isR==-2) {
        cha = nd->left;
        if (cha->isR<=0) return cms_rotate_sr_ll(nd, cha);
        if (cha->isR==1) return cms_rotate_dl_ll(nd, cha);
    }
    return nd;
}

cms_node_ll* _cms_remove_from_targ_ll(cms_node_ll* nd, Boolean remove_all){
    if (nd->count>1 && !remove_all){
        --(nd->count);
        --(nd->size);
        return nd;
    }
    cms_node_ll* left = nd->left;
    cms_node_ll* right = nd->right;
    if (left==NULL && right==NULL) {
        free(nd);
        return NULL;
    }
    if (left!=NULL && right!=NULL) {
        cms_node_ll* ch = _cms_remove_max_ll(left, nd);
        nd->left = ch;
        cms_node_update_ll(nd);
        if (nd->isR==2) {
            cms_node_ll* cha = nd->right;
            if (cha->isR>=0) return cms_rotate_sl_ll(nd, cha);
            if (cha->isR==-1) return cms_rotate_dr_ll(nd, cha);
        }
        return nd;
        
    }
    free(nd);
    if (left!=NULL) return left;
    else return right;
}


cms_node_ll* _cms_remove_ll(cms_node_ll* nd, cms_data_t_ll k, Boolean remove_all){
    if(nd->key==k) return _cms_remove_from_targ_ll(nd, remove_all);
    cms_node_ll *ch, *cha;
    if(nd->key<k) {
        if (nd->right==NULL) {
            return nd;
        } else {
            ch = _cms_remove_ll(nd->right, k, remove_all);
            nd->right = ch;
        }
        cms_node_update_ll(nd);
        if (nd->isR==-2) {
            cha = nd->left;
            if (cha->isR<=0) return cms_rotate_sr_ll(nd, cha);
            if (cha->isR==1) return cms_rotate_dl_ll(nd, cha);
        }
        return nd;
    }
    else {
        if (nd->left==NULL) {
            return nd;
        } else {
            ch = _cms_remove_ll(nd->left, k, remove_all);
            nd->left = ch;
        }
        cms_node_update_ll(nd);
        if (nd->isR==2) {
            cha = nd->right;
            if (cha->isR>=0) return cms_rotate_sl_ll(nd, cha);
            if (cha->isR==-1) return cms_rotate_dr_ll(nd, cha);
        }
        return nd;
    }
}

void cms_remove_ll(comultiset_ll* cms, cms_data_t_ll k, Boolean remove_all){
    cms->root = _cms_remove_ll(cms->root, k, remove_all);
    if (cms->root==NULL) cms->size = 0;
    else cms->size = (cms->root)->size;
}

cms_node_ll* _cms_get_k_ll(cms_node_ll* nd, int k, int l){
    int ls;
    if (nd->left!=NULL) ls = (nd->left)->size;
    else ls = 0;
    int count = nd->count;
    if (l+ls<k && k<=l+ls+count) return nd;
    if (l+ls>=k) return _cms_get_k_ll(nd->left, k, l);
    if (l+ls+count<k) return _cms_get_k_ll(nd->right, k, l+ls+1);
}

cms_node_ll* cms_get_k_ll(comultiset_ll* cms, int k){
    //assert (cms->root!=NULL);
    //assert ((cms->root)->size>k);
    return _cms_get_k_ll(cms->root, k+1, 0);
}

```

```./lib/data_structures/comultiset/lf/instance.h

//lf=lf

typedef lf cms_data_t_lf;

// AVL tree
typedef struct cms_node_lf {
    cms_data_t_lf key;
    int count;
    struct cms_node_lf* left;
    struct cms_node_lf* right;
    int rank;
    int size;
    int isR;    // L: -1, E: 0, R: 1
} cms_node_lf;

cms_node_lf* cms_new_node_lf(cms_data_t_lf key, int count){
    cms_node_lf* nd = (cms_node_lf*)malloc(sizeof(cms_node_lf));
    nd->key = key;
    nd->count = count;
    nd->left = NULL;
    nd->right = NULL;
    nd->rank = 0;
    nd->size = count;
    nd->isR = 0;
    return nd;
}

void cms_node_update_lf(cms_node_lf* nd){
    cms_node_lf* left = nd->left;
    cms_node_lf* right = nd->right;
    int lr, rr, ls, rs;
    if (left==NULL){
        lr = -1;
        ls = 0;
    } else {
        lr = left->rank;
        ls = left->size;
    }
    if (right==NULL){
        rr = -1;
        rs = 0;
    } else {
        rr = right->rank;
        rs = right->size;
    }
    nd->rank = 1+((lr>rr)?lr:rr);
    nd->size = ls+rs+nd->count;
    nd->isR = rr-lr;
}

typedef struct {
    cms_node_lf* root;
    int size;
} comultiset_lf;

comultiset_lf* comultiset_init_lf(){
    comultiset_lf* cms = (comultiset_lf*)malloc(sizeof(comultiset_lf));
    cms->root = NULL;
    cms->size = 0;
    return cms;
}

void _cms_clear_lf(cms_node_lf* nd){
    if (nd->left!=NULL) _cms_clear_lf(nd->left);
    if (nd->right!=NULL) _cms_clear_lf(nd->right);
    free(nd);
    return;
}

void cms_clear_lf(comultiset_lf* cms){
    if (cms->root==NULL) return;
    _cms_clear_lf(cms->root);
    cms->root = NULL;
    cms->size = 0;
}

int cms_get_size_lf(comultiset_lf* cms){
    return cms->size;
}

cms_node_lf* _cms_max_lf(cms_node_lf* nd){
    if (nd->right==NULL) return nd;
    return _cms_max_lf(nd->right);
}

cms_node_lf* cms_max_lf(comultiset_lf* cms){
    if (cms->root==NULL) return NULL;
    return _cms_max_lf(cms->root);
}

cms_node_lf* _cms_min_lf(cms_node_lf* nd){
    if (nd->left==NULL) return nd;
    return _cms_min_lf(nd->left);
}

cms_node_lf* cms_min_lf(comultiset_lf* cms){
    if (cms->root==NULL) return NULL;
    return _cms_min_lf(cms->root);
}

cms_node_lf* _cms_lower_bound_lf(cms_node_lf* nd, cms_data_t_lf k){
	if (nd==NULL) return NULL;
	if (nd->key < k) return _cms_lower_bound_lf(nd->right, k);
	return _cms_lower_bound_lf(nd->left, k)?:nd;
}

cms_node_lf* cms_lower_bound_lf(comultiset_lf* cms, cms_data_t_lf k){
    return _cms_lower_bound_lf(cms->root, k);
}

cms_node_lf* _cms_rlower_bound_lf(cms_node_lf* nd, cms_data_t_lf k){
	if (nd==NULL) return NULL;
	if (nd->key > k) return _cms_rlower_bound_lf(nd->left, k);
	return _cms_rlower_bound_lf(nd->right, k)?:nd;
}

cms_node_lf* cms_rlower_bound_lf(comultiset_lf* cms, cms_data_t_lf k){
    return _cms_rlower_bound_lf(cms->root, k);
}

cms_node_lf* _cms_upper_bound_lf(cms_node_lf* nd, cms_data_t_lf k){
	if(nd==NULL) return NULL;
	if(nd->key <= k) return _cms_upper_bound_lf(nd->right, k);
	return _cms_upper_bound_lf(nd->left, k)?:nd;
}

cms_node_lf* cms_upper_bound_lf(comultiset_lf* cms, cms_data_t_lf k){
    return _cms_upper_bound_lf(cms->root, k);
}

cms_node_lf* _cms_rupper_bound_lf(cms_node_lf* nd, cms_data_t_lf k){
	if(nd==NULL) return NULL;
	if(nd->key >= k) return _cms_rupper_bound_lf(nd->left, k);
	return _cms_rupper_bound_lf(nd->right, k)?:nd;
}

cms_node_lf* cms_rupper_bound_lf(comultiset_lf* cms, cms_data_t_lf k){
    return _cms_rupper_bound_lf(cms->root, k);
}

cms_node_lf* _cms_find_lf(cms_node_lf* nd, cms_data_t_lf k){
    if(nd==NULL) return NULL;
    if(nd->key==k) return nd;
    if(nd->key<k) return _cms_find_lf(nd->right, k);
    if(nd->key>k) return _cms_find_lf(nd->left, k);
}

cms_node_lf* cms_find_lf(comultiset_lf* cms, cms_data_t_lf k){
    return _cms_find_lf(cms->root, k);
}

int cms_count_lf(cms_node_lf* cms, cms_data_t_lf k){
    cms_node_lf* nd = _cms_find_lf(cms, k);
    if (nd==NULL) return 0;
    return nd->count;
}

cms_node_lf* cms_rotate_sl_lf(cms_node_lf* nd, cms_node_lf* ch){
    cms_node_lf* beta = ch->left;
    ch->left = nd;
    nd->right = beta;
    cms_node_update_lf(nd);
    cms_node_update_lf(ch);
    return ch;
}

cms_node_lf* cms_rotate_dr_lf(cms_node_lf* nd, cms_node_lf* ch){
    cms_node_lf *chch, *beta, *gamma;
    chch = ch->left;
    beta = chch->left;
    gamma = chch->right;
    chch->left = nd;
    chch->right = ch;
    nd->right = beta;
    ch->left = gamma;
    cms_node_update_lf(nd);
    cms_node_update_lf(ch);
    cms_node_update_lf(chch);
    return chch;
}

cms_node_lf* cms_rotate_sr_lf(cms_node_lf* nd, cms_node_lf* ch){
    cms_node_lf* beta = ch->right;
    ch->right = nd;
    nd->left = beta;
    cms_node_update_lf(nd);
    cms_node_update_lf(ch);
    return ch;
}

cms_node_lf* cms_rotate_dl_lf(cms_node_lf* nd, cms_node_lf* ch){
    cms_node_lf *chch, *beta, *gamma;
    chch = ch->right;
    beta = chch->right;
    gamma = chch->left;
    chch->right = nd;
    chch->left = ch;
    nd->left = beta;
    ch->right = gamma;
    cms_node_update_lf(nd);
    cms_node_update_lf(ch);
    cms_node_update_lf(chch);
    return chch;
}

cms_node_lf* _cms_insert_lf(cms_node_lf* nd, cms_data_t_lf k, int count){
    if(nd->key==k) {
        (nd->count) += count;
        nd->size += count;
        return nd;
    }
    cms_node_lf* ch;
    if(nd->key<k) {
        if (nd->right==NULL) {
            ch = cms_new_node_lf(k, count); 
            nd->right = ch;
        } else {
            ch = _cms_insert_lf(nd->right, k, count);
            nd->right = ch;
        }
        cms_node_update_lf(nd);
        if (nd->isR==2) {
            if (ch->isR==1) return cms_rotate_sl_lf(nd, ch);
            if (ch->isR==-1) return cms_rotate_dr_lf(nd, ch);
        }
        return nd;
    }
    else {
        if (nd->left==NULL) {
            ch = cms_new_node_lf(k, count); 
            nd->left = ch;
        } else {
            ch = _cms_insert_lf(nd->left, k, count);
            nd->left = ch;
        }
        cms_node_update_lf(nd);
        if (nd->isR==-2) {
            if (ch->isR==-1) return cms_rotate_sr_lf(nd, ch);
            if (ch->isR==1) return cms_rotate_dl_lf(nd, ch);
        }
        return nd;
    }
    exit(1);
    return NULL;
}

void cms_insert_lf(comultiset_lf* cms, cms_data_t_lf k, int count){
    if (cms->root==NULL){
        cms->root = cms_new_node_lf(k, count);
        cms->size = (cms->root)->size;
        return;
    }
    cms_node_lf* ptr = _cms_insert_lf(cms->root, k, count);
    if (ptr!=NULL) cms->root = ptr;
    cms->size = (cms->root)->size;
}

//これから
//削除したnodeの子が一つ→それをそのまま上げる
//二つ→左側の子孫の最大値を持ってくる
cms_node_lf* _cms_remove_max_lf(cms_node_lf* nd, cms_node_lf* targ){
    if (nd->right==NULL) {
        targ->key = nd->key;
        targ->count = nd->count;
        cms_node_lf* ch = nd->left;
        free(nd);
        return ch;
    }
    cms_node_lf *ch, *cha; 
    ch = _cms_remove_max_lf(nd->right, targ);
    nd->right = ch;
    
    cms_node_update_lf(nd);
    if (nd->isR==-2) {
        cha = nd->left;
        if (cha->isR<=0) return cms_rotate_sr_lf(nd, cha);
        if (cha->isR==1) return cms_rotate_dl_lf(nd, cha);
    }
    return nd;
}

cms_node_lf* _cms_remove_from_targ_lf(cms_node_lf* nd, Boolean remove_all){
    if (nd->count>1 && !remove_all){
        --(nd->count);
        --(nd->size);
        return nd;
    }
    cms_node_lf* left = nd->left;
    cms_node_lf* right = nd->right;
    if (left==NULL && right==NULL) {
        free(nd);
        return NULL;
    }
    if (left!=NULL && right!=NULL) {
        cms_node_lf* ch = _cms_remove_max_lf(left, nd);
        nd->left = ch;
        cms_node_update_lf(nd);
        if (nd->isR==2) {
            cms_node_lf* cha = nd->right;
            if (cha->isR>=0) return cms_rotate_sl_lf(nd, cha);
            if (cha->isR==-1) return cms_rotate_dr_lf(nd, cha);
        }
        return nd;
        
    }
    free(nd);
    if (left!=NULL) return left;
    else return right;
}


cms_node_lf* _cms_remove_lf(cms_node_lf* nd, cms_data_t_lf k, Boolean remove_all){
    if(nd->key==k) return _cms_remove_from_targ_lf(nd, remove_all);
    cms_node_lf *ch, *cha;
    if(nd->key<k) {
        if (nd->right==NULL) {
            return nd;
        } else {
            ch = _cms_remove_lf(nd->right, k, remove_all);
            nd->right = ch;
        }
        cms_node_update_lf(nd);
        if (nd->isR==-2) {
            cha = nd->left;
            if (cha->isR<=0) return cms_rotate_sr_lf(nd, cha);
            if (cha->isR==1) return cms_rotate_dl_lf(nd, cha);
        }
        return nd;
    }
    else {
        if (nd->left==NULL) {
            return nd;
        } else {
            ch = _cms_remove_lf(nd->left, k, remove_all);
            nd->left = ch;
        }
        cms_node_update_lf(nd);
        if (nd->isR==2) {
            cha = nd->right;
            if (cha->isR>=0) return cms_rotate_sl_lf(nd, cha);
            if (cha->isR==-1) return cms_rotate_dr_lf(nd, cha);
        }
        return nd;
    }
}

void cms_remove_lf(comultiset_lf* cms, cms_data_t_lf k, Boolean remove_all){
    cms->root = _cms_remove_lf(cms->root, k, remove_all);
    if (cms->root==NULL) cms->size = 0;
    else cms->size = (cms->root)->size;
}

cms_node_lf* _cms_get_k_lf(cms_node_lf* nd, int k, int l){
    int ls;
    if (nd->left!=NULL) ls = (nd->left)->size;
    else ls = 0;
    int count = nd->count;
    if (l+ls<k && k<=l+ls+count) return nd;
    if (l+ls>=k) return _cms_get_k_lf(nd->left, k, l);
    if (l+ls+count<k) return _cms_get_k_lf(nd->right, k, l+ls+1);
}

cms_node_lf* cms_get_k_lf(comultiset_lf* cms, int k){
    //assert (cms->root!=NULL);
    //assert ((cms->root)->size>k);
    return _cms_get_k_lf(cms->root, k+1, 0);
}

```

```./lib/utility/io.h

static ll scanner_ll() {
	ll x = 0, f = 1, c;
	while (c = getchar_unlocked(), c < 48 || c > 57) if (c == 45) f = -f;
	while (47 < c && c < 58) {
		x = x * 10 + c - 48;
    	c = getchar_unlocked();
	}
	return f * x;
}

//未完成
static ll* scanner_ll_multi(int n) {
	ll* res = (ll*)malloc(n*sizeof(int));
	for (int i=0;i<n;++i) res[i] = scanner_ll();
	return res;
}

static char* scanner_string(int n) {
	char* res = (char*)malloc((n+1)*sizeof(char));
	char c = getchar_unlocked();
	while (c < 32) c = getchar_unlocked();
	int i = 0;
	while (c >= 32) {
    	res[i] = c;
    	c = getchar_unlocked();
    	i++;
	}
	res[i] = '\0';
	return res;
}

static void printer_ll(ll x) {
	if (x < 0) {
		putchar_unlocked('-');
		x = -x;
	}
	if (x >= 10) {
    	printer_ll(x / 10);
	}
  	putchar_unlocked(x - x / 10 * 10 + 48);
}

static void printer_ll_one(ll x) {
    printer_ll(x);
    putchar_unlocked('\n');
}

static void printer_ll_array_v(ll* x, int n) {
    for (int i=0;i<n-1;++i) {
        printer_ll(x[i]);
        putchar_unlocked(' ');
    }
    printer_ll(x[n-1]);
    putchar_unlocked('\n');
}

static void printer_ll_array_h(ll* x, int n) {
    for (int i=0;i<n;++i) {
        printer_ll(x[i]);
        putchar_unlocked('\n');
    }
}

static void printer_string(char* x, int n) {
    int i = 0;
	while (x[i]!='\0' && i<n) {
		putchar_unlocked(x[i]);
		++i;
	}
	putchar_unlocked('\n');
}

```

```./lib/temp_compprog.h

from cffi import FFI
import os

ffibuilder = FFI()

# cdef() expects a single string declaring the C types, functions and
# globals needed to use the shared object. It must be in valid C syntax.
ffibuilder.cdef(\"\"\"
typedef int Boolean;
typedef long long ll;
typedef double lf;

typedef ll hq_data_t_ll;
typedef struct {
    int cap;
    int n;
    hq_data_t_ll* q;
} cheapq_ll;

cheapq_ll *hq_init_ll(int _length);
int hq_get_size_ll(cheapq_ll *hq);
hq_data_t_ll hq_pop_ll(cheapq_ll *hq);
hq_data_t_ll hq_top_ll(cheapq_ll *hq);
void hq_push_ll(cheapq_ll *hq, hq_data_t_ll x);

typedef lf hq_data_t_lf;
typedef struct {
    int cap;
    int n;
    hq_data_t_lf* q;
} cheapq_lf;

cheapq_lf *hq_init_lf(int _length);
int hq_get_size_lf(cheapq_lf *hq);
hq_data_t_lf hq_pop_lf(cheapq_lf *hq);
hq_data_t_lf hq_top_lf(cheapq_lf *hq);
void hq_push_lf(cheapq_lf *hq, hq_data_t_lf x);

typedef ll cs_data_t_ll;

typedef struct cs_node_ll{
    cs_data_t_ll key;
    struct cs_node_ll* left;
    struct cs_node_ll* right;
    int rank;
    int size;
    int isR;
} cs_node_ll;

typedef struct {
    cs_node_ll* root;
    int size;
} coset_ll;

coset_ll* coset_init_ll();
void cs_clear_ll(coset_ll* cs);
int cs_get_size_ll(coset_ll* cs);
cs_node_ll* cs_max_ll(coset_ll* cs);
cs_node_ll* cs_min_ll(coset_ll* cs);
cs_node_ll* cs_lower_bound_ll(coset_ll* cs, cs_data_t_ll k);
cs_node_ll* cs_rlower_bound_ll(coset_ll* cs, cs_data_t_ll k);
cs_node_ll* cs_upper_bound_ll(coset_ll* cs, cs_data_t_ll k);
cs_node_ll* cs_rupper_bound_ll(coset_ll* cs, cs_data_t_ll k);
cs_node_ll* cs_find_ll(coset_ll* cs, cs_data_t_ll k);
void cs_insert_ll(coset_ll* cs, cs_data_t_ll k);
void cs_remove_ll(coset_ll* cs, cs_data_t_ll k);
cs_node_ll* cs_get_k_ll(coset_ll* cs, int k);

typedef lf cs_data_t_lf;

typedef struct cs_node_lf{
    cs_data_t_lf key;
    struct cs_node_lf* left;
    struct cs_node_lf* right;
    int rank;
    int size;
    int isR;
} cs_node_lf;

typedef struct {
    cs_node_lf* root;
    int size;
} coset_lf;

coset_lf* coset_init_lf();
void cs_clear_lf(coset_lf* cs);
int cs_get_size_lf(coset_lf* cs);
cs_node_lf* cs_max_lf(coset_lf* cs);
cs_node_lf* cs_min_lf(coset_lf* cs);
cs_node_lf* cs_lower_bound_lf(coset_lf* cs, cs_data_t_lf k);
cs_node_lf* cs_rlower_bound_lf(coset_lf* cs, cs_data_t_lf k);
cs_node_lf* cs_upper_bound_lf(coset_lf* cs, cs_data_t_lf k);
cs_node_lf* cs_rupper_bound_lf(coset_lf* cs, cs_data_t_lf k);
cs_node_lf* cs_find_lf(coset_lf* cs, cs_data_t_lf k);
void cs_insert_lf(coset_lf* cs, cs_data_t_lf k);
void cs_remove_lf(coset_lf* cs, cs_data_t_lf k);
cs_node_lf* cs_get_k_lf(coset_lf* cs, int k);

typedef ll cms_data_t_ll;

typedef struct cms_node_ll{
    cms_data_t_ll key;
    int count;
    struct cms_node_ll* left;
    struct cms_node_ll* right;
    int rank;
    int size;
    int isR;
} cms_node_ll;

typedef struct {
    cms_node_ll* root;
    int size;
} comultiset_ll;

comultiset_ll* comultiset_init_ll();
void cms_clear_ll(comultiset_ll* cms);
int cms_get_size_ll(comultiset_ll* cms);
cms_node_ll* cms_max_ll(comultiset_ll* cms);
cms_node_ll* cms_min_ll(comultiset_ll* cms);
cms_node_ll* cms_lower_bound_ll(comultiset_ll* cms, cms_data_t_ll k);
cms_node_ll* cms_rlower_bound_ll(comultiset_ll* cms, cms_data_t_ll k);
cms_node_ll* cms_upper_bound_ll(comultiset_ll* cms, cms_data_t_ll k);
cms_node_ll* cms_rupper_bound_ll(comultiset_ll* cms, cms_data_t_ll k);
cms_node_ll* cms_find_ll(comultiset_ll* cms, cms_data_t_ll k);
int cms_count_ll(cms_node_ll* cms, cms_data_t_ll k);
void cms_insert_ll(comultiset_ll* cms, cms_data_t_ll k, int count);
void cms_remove_ll(comultiset_ll* cms, cms_data_t_ll k, Boolean remove_all);
cms_node_ll* cms_get_k_ll(comultiset_ll* cms, int k);

typedef lf cms_data_t_lf;

typedef struct cms_node_lf{
    cms_data_t_lf key;
    int count;
    struct cms_node_lf* left;
    struct cms_node_lf* right;
    int rank;
    int size;
    int isR;
} cms_node_lf;

typedef struct {
    cms_node_lf* root;
    int size;
} comultiset_lf;

comultiset_lf* comultiset_init_lf();
void cms_clear_lf(comultiset_lf* cms);
int cms_get_size_lf(comultiset_lf* cms);
cms_node_lf* cms_max_lf(comultiset_lf* cms);
cms_node_lf* cms_min_lf(comultiset_lf* cms);
cms_node_lf* cms_lower_bound_lf(comultiset_lf* cms, cms_data_t_lf k);
cms_node_lf* cms_rlower_bound_lf(comultiset_lf* cms, cms_data_t_lf k);
cms_node_lf* cms_upper_bound_lf(comultiset_lf* cms, cms_data_t_lf k);
cms_node_lf* cms_rupper_bound_lf(comultiset_lf* cms, cms_data_t_lf k);
cms_node_lf* cms_find_lf(comultiset_lf* cms, cms_data_t_lf k);
int cms_count_lf(cms_node_lf* cms, cms_data_t_lf k);
void cms_insert_lf(comultiset_lf* cms, cms_data_t_lf k, int count);
void cms_remove_lf(comultiset_lf* cms, cms_data_t_lf k, Boolean remove_all);
cms_node_lf* cms_get_k_lf(comultiset_lf* cms, int k);


static ll scanner_ll();
static char* scanner_string(int n);
static void printer_ll_one(ll x);
static void printer_ll_array_v(ll* x, int n);
static void printer_ll_array_h(ll* x, int n);

\"\"\")

ffibuilder.set_source(\"_compprog_cffi\",
\"\"\"
     #include \"temp_compprog.h\"   // the C header of the library
\"\"\")

if __name__ == \"__main__\":
    os.chdir(\"lib/\")
    ffibuilder.compile(verbose=True)

```

```./src_builders/temp_compile.py

from cffi import FFI
import os

ffibuilder = FFI()

# cdef() expects a single string declaring the C types, functions and
# globals needed to use the shared object. It must be in valid C syntax.
ffibuilder.cdef(\"\"\"
typedef int Boolean;
typedef long long ll;
typedef double lf;

typedef ll hq_data_t_ll;
typedef struct {
    int cap;
    int n;
    hq_data_t_ll* q;
} cheapq_ll;

cheapq_ll *hq_init_ll(int _length);
int hq_get_size_ll(cheapq_ll *hq);
hq_data_t_ll hq_pop_ll(cheapq_ll *hq);
hq_data_t_ll hq_top_ll(cheapq_ll *hq);
void hq_push_ll(cheapq_ll *hq, hq_data_t_ll x);

typedef lf hq_data_t_lf;
typedef struct {
    int cap;
    int n;
    hq_data_t_lf* q;
} cheapq_lf;

cheapq_lf *hq_init_lf(int _length);
int hq_get_size_lf(cheapq_lf *hq);
hq_data_t_lf hq_pop_lf(cheapq_lf *hq);
hq_data_t_lf hq_top_lf(cheapq_lf *hq);
void hq_push_lf(cheapq_lf *hq, hq_data_t_lf x);

typedef ll cs_data_t_ll;

typedef struct cs_node_ll{
    cs_data_t_ll key;
    struct cs_node_ll* left;
    struct cs_node_ll* right;
    int rank;
    int size;
    int isR;
} cs_node_ll;

typedef struct {
    cs_node_ll* root;
    int size;
} coset_ll;

coset_ll* coset_init_ll();
void cs_clear_ll(coset_ll* cs);
int cs_get_size_ll(coset_ll* cs);
cs_node_ll* cs_max_ll(coset_ll* cs);
cs_node_ll* cs_min_ll(coset_ll* cs);
cs_node_ll* cs_lower_bound_ll(coset_ll* cs, cs_data_t_ll k);
cs_node_ll* cs_rlower_bound_ll(coset_ll* cs, cs_data_t_ll k);
cs_node_ll* cs_upper_bound_ll(coset_ll* cs, cs_data_t_ll k);
cs_node_ll* cs_rupper_bound_ll(coset_ll* cs, cs_data_t_ll k);
cs_node_ll* cs_find_ll(coset_ll* cs, cs_data_t_ll k);
void cs_insert_ll(coset_ll* cs, cs_data_t_ll k);
void cs_remove_ll(coset_ll* cs, cs_data_t_ll k);
cs_node_ll* cs_get_k_ll(coset_ll* cs, int k);

typedef lf cs_data_t_lf;

typedef struct cs_node_lf{
    cs_data_t_lf key;
    struct cs_node_lf* left;
    struct cs_node_lf* right;
    int rank;
    int size;
    int isR;
} cs_node_lf;

typedef struct {
    cs_node_lf* root;
    int size;
} coset_lf;

coset_lf* coset_init_lf();
void cs_clear_lf(coset_lf* cs);
int cs_get_size_lf(coset_lf* cs);
cs_node_lf* cs_max_lf(coset_lf* cs);
cs_node_lf* cs_min_lf(coset_lf* cs);
cs_node_lf* cs_lower_bound_lf(coset_lf* cs, cs_data_t_lf k);
cs_node_lf* cs_rlower_bound_lf(coset_lf* cs, cs_data_t_lf k);
cs_node_lf* cs_upper_bound_lf(coset_lf* cs, cs_data_t_lf k);
cs_node_lf* cs_rupper_bound_lf(coset_lf* cs, cs_data_t_lf k);
cs_node_lf* cs_find_lf(coset_lf* cs, cs_data_t_lf k);
void cs_insert_lf(coset_lf* cs, cs_data_t_lf k);
void cs_remove_lf(coset_lf* cs, cs_data_t_lf k);
cs_node_lf* cs_get_k_lf(coset_lf* cs, int k);

typedef ll cms_data_t_ll;

typedef struct cms_node_ll{
    cms_data_t_ll key;
    int count;
    struct cms_node_ll* left;
    struct cms_node_ll* right;
    int rank;
    int size;
    int isR;
} cms_node_ll;

typedef struct {
    cms_node_ll* root;
    int size;
} comultiset_ll;

comultiset_ll* comultiset_init_ll();
void cms_clear_ll(comultiset_ll* cms);
int cms_get_size_ll(comultiset_ll* cms);
cms_node_ll* cms_max_ll(comultiset_ll* cms);
cms_node_ll* cms_min_ll(comultiset_ll* cms);
cms_node_ll* cms_lower_bound_ll(comultiset_ll* cms, cms_data_t_ll k);
cms_node_ll* cms_rlower_bound_ll(comultiset_ll* cms, cms_data_t_ll k);
cms_node_ll* cms_upper_bound_ll(comultiset_ll* cms, cms_data_t_ll k);
cms_node_ll* cms_rupper_bound_ll(comultiset_ll* cms, cms_data_t_ll k);
cms_node_ll* cms_find_ll(comultiset_ll* cms, cms_data_t_ll k);
int cms_count_ll(cms_node_ll* cms, cms_data_t_ll k);
void cms_insert_ll(comultiset_ll* cms, cms_data_t_ll k, int count);
void cms_remove_ll(comultiset_ll* cms, cms_data_t_ll k, Boolean remove_all);
cms_node_ll* cms_get_k_ll(comultiset_ll* cms, int k);

typedef lf cms_data_t_lf;

typedef struct cms_node_lf{
    cms_data_t_lf key;
    int count;
    struct cms_node_lf* left;
    struct cms_node_lf* right;
    int rank;
    int size;
    int isR;
} cms_node_lf;

typedef struct {
    cms_node_lf* root;
    int size;
} comultiset_lf;

comultiset_lf* comultiset_init_lf();
void cms_clear_lf(comultiset_lf* cms);
int cms_get_size_lf(comultiset_lf* cms);
cms_node_lf* cms_max_lf(comultiset_lf* cms);
cms_node_lf* cms_min_lf(comultiset_lf* cms);
cms_node_lf* cms_lower_bound_lf(comultiset_lf* cms, cms_data_t_lf k);
cms_node_lf* cms_rlower_bound_lf(comultiset_lf* cms, cms_data_t_lf k);
cms_node_lf* cms_upper_bound_lf(comultiset_lf* cms, cms_data_t_lf k);
cms_node_lf* cms_rupper_bound_lf(comultiset_lf* cms, cms_data_t_lf k);
cms_node_lf* cms_find_lf(comultiset_lf* cms, cms_data_t_lf k);
int cms_count_lf(cms_node_lf* cms, cms_data_t_lf k);
void cms_insert_lf(comultiset_lf* cms, cms_data_t_lf k, int count);
void cms_remove_lf(comultiset_lf* cms, cms_data_t_lf k, Boolean remove_all);
cms_node_lf* cms_get_k_lf(comultiset_lf* cms, int k);


static ll scanner_ll();
static char* scanner_string(int n);
static void printer_ll_one(ll x);
static void printer_ll_array_v(ll* x, int n);
static void printer_ll_array_h(ll* x, int n);

\"\"\")

ffibuilder.set_source(\"_compprog_cffi\",
\"\"\"
     #include \"temp_compprog.h\"   // the C header of the library
\"\"\")

if __name__ == \"__main__\":
    os.chdir(\"lib/\")
    ffibuilder.compile(verbose=True)

```


"""
